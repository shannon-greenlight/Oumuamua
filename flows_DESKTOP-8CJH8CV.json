[
    {
        "id": "ef4cb095a7656cc5",
        "type": "tab",
        "label": "SCP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a0954fe29f87ceff",
        "type": "subflow",
        "name": "HTTP Sender",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "d834998fd2533b91"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 600,
            "y": 60,
            "wires": [
                {
                    "id": "5a1ebb28ce1c7929",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "90cfb10a56fd7196",
        "type": "subflow",
        "name": "Get Script",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "5656aa8175c7222b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 80,
                "wires": [
                    {
                        "id": "245292b15afe9794",
                        "port": 0
                    },
                    {
                        "id": "cecc26fbe3db1455",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 760,
            "y": 220,
            "wires": [
                {
                    "id": "37980c96a4b8052a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "80f13c56f5360838",
        "type": "subflow",
        "name": "Twitter Scanner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "4c6fcf4b1972aa16"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 80,
                "wires": [
                    {
                        "id": "06bb62c348b36af2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "status": {
            "x": 620,
            "y": 240,
            "wires": [
                {
                    "id": "9baf0c949fbdde64",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b77158335238532e",
        "type": "subflow",
        "name": "Process UI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "72ab58c8cba0a9ca"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "0b31b19fc634e035",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 120,
                "wires": [
                    {
                        "id": "da73d9101d84a872",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 160,
                "wires": [
                    {
                        "id": "da73d9101d84a872",
                        "port": 1
                    }
                ]
            },
            {
                "x": 700,
                "y": 200,
                "wires": [
                    {
                        "id": "da73d9101d84a872",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "41efa1154190c24d",
        "type": "subflow",
        "name": "Subflow 4",
        "info": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "eb69d32d44bd76d9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "5c23d09cc53d8bf1",
                        "port": 0
                    },
                    {
                        "id": "a5820b2710a91bb4",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "3581784ff799b3aa",
        "type": "subflow",
        "name": "Do Script",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "5c152458e886a684"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1360,
                "y": 120,
                "wires": [
                    {
                        "id": "87313341488d5136",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4f82a66a.93b828",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.0.111",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "54588401fea63e01",
        "type": "mongodb",
        "hostname": "cluster0.j5ukc.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "",
        "port": "27017",
        "db": "spank_scripts2",
        "name": ""
    },
    {
        "id": "97825d26110221fc",
        "type": "twitter-credentials",
        "screen_name": "GreenfaceLabs"
    },
    {
        "id": "4396d4fbcfa72625",
        "type": "ui_tab",
        "z": "a0954fe29f87ceff",
        "name": "Greenface Labs",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "aeb4069b6516d878",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Gill Sans,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Gill Sans,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 80,
                "sy": 80,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8bb6231cf84625a5",
        "type": "ui_group",
        "z": "a0954fe29f87ceff",
        "name": "Oumuamua",
        "tab": "4396d4fbcfa72625",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "2a033f5be28e93e0",
        "type": "ui_group",
        "z": "a0954fe29f87ceff",
        "name": "Debug",
        "tab": "4396d4fbcfa72625",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a6aeaef83ff76327",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "tweet",
                "v": "{  \"text\" : \"\" }",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "Trigger",
        "payload": "{\"name\":\"Init\"}",
        "payloadType": "json",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "b84ec5acc38872a7",
        "type": "subflow:a0954fe29f87ceff",
        "z": "ef4cb095a7656cc5",
        "name": "HTTP Sender",
        "env": [],
        "x": 800,
        "y": 280,
        "wires": []
    },
    {
        "id": "245292b15afe9794",
        "type": "mongodb in",
        "z": "90cfb10a56fd7196",
        "mongodb": "54588401fea63e01",
        "name": "Get Data",
        "collection": "sentiment_4_2",
        "operation": "find",
        "x": 820,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6b769294dec11207",
        "type": "subflow:90cfb10a56fd7196",
        "z": "ef4cb095a7656cc5",
        "name": "Get Script",
        "env": [],
        "x": 580,
        "y": 220,
        "wires": [
            [
                "b84ec5acc38872a7"
            ]
        ]
    },
    {
        "id": "e9b5eb687838abc6",
        "type": "file in",
        "z": "90cfb10a56fd7196",
        "name": "Get File Data",
        "filename": "C:\\Users\\Shannon\\Dropbox\\moog\\spankulator\\node-red\\docs\\sentiment_4.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 690,
        "y": 140,
        "wires": [
            [
                "93c505cdf66d1892"
            ]
        ]
    },
    {
        "id": "93c505cdf66d1892",
        "type": "json",
        "z": "90cfb10a56fd7196",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 140,
        "wires": [
            [
                "cecc26fbe3db1455"
            ]
        ]
    },
    {
        "id": "6ef2c13140bffd5b",
        "type": "comment",
        "z": "ef4cb095a7656cc5",
        "name": "Spankulator command processor",
        "info": "# Spankulator Command Processor\nThe SCP runs scripts that control The Spankulator.\nThe scripts are found in either a MongoDB Atlas or in a JSON formatted text file.\nEach script contains an array of objects in the format:\n{\n    name: String,\n    commands: Array of Strings,\n    delay: msecs to delay after script is run\n}\n * The commands are sent to the Spankulator via HTTP to the endpoint specified in the Spankulator's WiFi settings.\n * Commands are sent one-by-one by the **HTTP Sender** node that waits for the Spankulator's response before sending the next command.\n * Edit the **Start** node's payload parameter to enter the name of the script that is to be executed. eg. {\"name\":\"Up\"}\n * This payload is used by the **Get Data** node which delivers the script data to the **Set Commands** node.\n * A warning will be issued to the debug panel if the script is not found.\n * If the script is found, **Set Commands** sets the flow variables _commands_ and _delay_ to the data found in the script. The payload is ignored beyond this point.\n * The **HTTP Sender** node uses flow variables to parse and send the commands.",
        "x": 230,
        "y": 440,
        "wires": []
    },
    {
        "id": "70ed551ef77e5a0e",
        "type": "switch",
        "z": "90cfb10a56fd7196",
        "name": "",
        "property": "data_source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mongo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "file",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 80,
        "wires": [
            [
                "245292b15afe9794"
            ],
            [
                "e9b5eb687838abc6"
            ]
        ]
    },
    {
        "id": "5656aa8175c7222b",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Set Data Source",
        "func": "// msg.data_source=flow.get(\"$parent.data_source\").get()\nmsg.data_source = global.get(\"globals\").data_source\nmsg.cmd_name=msg.payload.name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "4147910c731c631d"
            ]
        ]
    },
    {
        "id": "c204c43e58c9ed0d",
        "type": "comment",
        "z": "a0954fe29f87ceff",
        "name": "msg ignored at input",
        "info": "",
        "x": 110,
        "y": 680,
        "wires": []
    },
    {
        "id": "cecc26fbe3db1455",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Find Data",
        "func": "function checkName(script) {\n    let search_term=msg.query.name\n    return script.name == search_term;\n}\nlet temp = msg.payload\nmsg.payload=[]\nmsg.payload[0]=temp.find(checkName)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "261f0e5136f2ad95",
        "type": "comment",
        "z": "90cfb10a56fd7196",
        "name": "",
        "info": "Sub Flow input payload contains search query object\n{ name : \"search_term\" }\n\nGet File data overwrites payload, so search object is put into msg.query\n\nReturns data object with commands and delay",
        "x": 100,
        "y": 360,
        "wires": []
    },
    {
        "id": "4147910c731c631d",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Set msg.query",
        "func": "msg.query=msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "70ed551ef77e5a0e",
                "37980c96a4b8052a"
            ]
        ]
    },
    {
        "id": "c96c313110f1d0e3",
        "type": "sentiment",
        "z": "80f13c56f5360838",
        "name": "",
        "property": "payload",
        "x": 780,
        "y": 80,
        "wires": [
            [
                "06bb62c348b36af2"
            ]
        ]
    },
    {
        "id": "6039339d5205e564",
        "type": "debug",
        "z": "80f13c56f5360838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sentiment.score",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 420,
        "wires": []
    },
    {
        "id": "06bb62c348b36af2",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "Message Processor",
        "func": "let score = msg.sentiment.score\nlet sentiment = score > 0 ? \"Up \" : \"Down \"\nif(score>10) {\n    score=10\n}\nif(score<-10) {\n    score=-10\n}\nscore = Math.abs(score)\nmsg.payload = { \"name\" : sentiment+score }\nif(msg.sentiment.score==0) {\n    msg.payload = { \"name\" : \"Default\" }\n}\nnode.send(msg)\nmsg.payload = { \"name\" : \"Init\" }\nmsg.tweet.text=\"\"\nmsg.tweet.extended_tweet = { full_text : \"\" }\nmsg.tweet.user = {}\nmsg.location = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"message_queue\",[])",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "78f6b9daba7558b0",
        "type": "debug",
        "z": "80f13c56f5360838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "90b884e16d0f35a3",
        "type": "subflow:80f13c56f5360838",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "env": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "a19ad4b6cb68ac7e",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "apple",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "90b884e16d0f35a3"
            ]
        ]
    },
    {
        "id": "88f28cd2c48a3b09",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "Twitter Gate",
        "func": "if(flow.get(\"$parent.twitter_on\") && msg.tweet.text.indexOf(flow.get(\"$parent.twitter_search\"))!=-1 && msg.lang==\"en\") {\n    msg.overrides={\"greenface\": 5}\n    return msg;\n} else {\n    // node.warn(\"Twitter Disabled! enabled=\"+flow.get(\"$parent.twitter_on\"))\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [
                "c96c313110f1d0e3"
            ]
        ]
    },
    {
        "id": "49b46025504b3c51",
        "type": "debug",
        "z": "80f13c56f5360838",
        "name": "Twitter Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "tweet.text",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 420,
        "wires": []
    },
    {
        "id": "17d96389be74e6c0",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Script Done",
        "func": "if(msg.topic==\"control\") {\n    msg.delay=msg.view_time\n    return msg;   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "a43740b735526d66",
                "48a4b94afe5e33f2"
            ]
        ]
    },
    {
        "id": "081e66efc4682d2e",
        "type": "debug",
        "z": "90cfb10a56fd7196",
        "name": "Data Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 300,
        "wires": []
    },
    {
        "id": "a43740b735526d66",
        "type": "delay",
        "z": "a0954fe29f87ceff",
        "name": "View Time",
        "pauseType": "delayv",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 430,
        "y": 320,
        "wires": [
            [
                "c543ab0b894d0bda"
            ]
        ]
    },
    {
        "id": "c543ab0b894d0bda",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Next Script",
        "func": "let chk_talker_status=function(){\n    const talker_status = flow.get(\"talker_status\")\n    if(talker_status!=\"playing\") {\n        let qlen=flow.get(\"$parent.queue_len\")\n        if(qlen==0) {\n            flow.set(\"$parent.queuing\",false)\n        }\n        msg.payload=\"trigger\"\n        node.send(msg)\n    } else {\n        setTimeout(chk_talker_status,500)\n    }\n}\n\nchk_talker_status()    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 320,
        "wires": [
            [
                "54ddcdf1a3f321fa",
                "a3c08b2c4234f9d3"
            ]
        ]
    },
    {
        "id": "54ddcdf1a3f321fa",
        "type": "q-gate",
        "z": "a0954fe29f87ceff",
        "name": "Queue",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "010b4454e988afe3"
            ]
        ]
    },
    {
        "id": "15e83af912a10abb",
        "type": "debug",
        "z": "a0954fe29f87ceff",
        "name": "UI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "456369ab92f7d534",
        "type": "status",
        "z": "a0954fe29f87ceff",
        "name": "Q Status",
        "scope": [
            "54ddcdf1a3f321fa"
        ],
        "x": 80,
        "y": 60,
        "wires": [
            [
                "5a1ebb28ce1c7929"
            ]
        ]
    },
    {
        "id": "5a1ebb28ce1c7929",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Set Queue Len",
        "func": "let qlen=0\nlet arr=msg.status.text.split(\" \")\nlet status=arr[0]\nif(status!=\"open\") {\n    qlen=arr[1]\n} \nflow.set(\"$parent.queue_status\",status)\nflow.set(\"$parent.queue_len\",qlen)\nmsg.payload=({fill:\"green\",shape:\"dot\",text:\"Queue len: \"+qlen + \" Status: \"+status});\n//msg.payload={queue_len:qlen,queue_status:status}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ab18a91e5ecd1534",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Reset Queue",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "reset",
        "payloadType": "str",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "b84ec5acc38872a7"
            ]
        ]
    },
    {
        "id": "d834998fd2533b91",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Queue Ctrl",
        "func": "if(msg.topic==\"control\") {\n    flow.set(\"$parent.queuing\",false)\n} else {\n    let qmsg = \"open\"\n    if(flow.get(\"$parent.queuing\")) {\n        qmsg=\"queue\"\n    }\n    let ctrlmsg = {\n        payload: qmsg,\n        topic: \"control\"\n    }\n    node.send(ctrlmsg)\n    flow.set(\"$parent.queuing\",true)\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 140,
        "wires": [
            [
                "54ddcdf1a3f321fa"
            ]
        ]
    },
    {
        "id": "9661cd55432a21c5",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "twitter_search",
                "v": "elit",
                "vt": "str"
            },
            {
                "p": "tweet.text",
                "v": "Lorem ipsum_dolor sit amet, consectetur adipiscing elit. Aliquam tempor dapibus interdum. Nullam id euismod lorem, vel elementum turpis. Nunc sit amet convallis leo, et vulputate dolor. Curabitur lobortis quam sed efficitur euismod. Nullam dapibus leo et elit dapibus, at auctor elit vehicula. ",
                "vt": "str"
            },
            {
                "p": "msg.tweet.user.profile_image_url",
                "v": "http://pbs.twimg.com/profile_images/942085419868479490/6C-qwM7H_normal.jpg",
                "vt": "str"
            },
            {
                "p": "msg.location.place",
                "v": "Outer Sasquatchia",
                "vt": "str"
            },
            {
                "p": "msg.tweet.user.screen_name",
                "v": "JoeBigfoot",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"name\":\"Test\"}",
        "payloadType": "json",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "db38738f211fe984"
            ]
        ]
    },
    {
        "id": "a3c08b2c4234f9d3",
        "type": "debug",
        "z": "a0954fe29f87ceff",
        "name": "Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "ee4c480b39108e75",
        "type": "ui_template",
        "z": "a0954fe29f87ceff",
        "group": "2a033f5be28e93e0",
        "name": "Debug",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .nr-dashboard-theme {\n        font-family: arial !important;\n    }\n    .debug_class {\n        color: red;\n    }\n    .warn_class {\n        color: orange;\n    }\n    #Greenface_Labs_Debug {\n        {{msg.debug_style}};\n    }\n    .hide {\n        display: none;\n    }\n</style>\n<div id=\"debug_fxn\" class=\"debug_class\" ng-bind-html=\"msg.payload.fxn\"></div>\n<div id=\"debug_cmd_name\" class=\"debug_class\" ng-bind-html=\"msg.cmd_name\"></div>\n<div class=\"debug_class\" ng-bind-html=\"msg.endpoint\"></div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 950,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "12bf12defeb60243",
        "type": "twitter in",
        "z": "80f13c56f5360838",
        "twitter": "97825d26110221fc",
        "tags": "",
        "user": "false",
        "name": "Scanner",
        "inputs": 1,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "88f28cd2c48a3b09"
            ]
        ]
    },
    {
        "id": "4c6fcf4b1972aa16",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "Set Twitter",
        "func": "let twitter_on = !flow.get(\"$parent.twitter_on\")\nflow.set(\"$parent.twitter_on\",twitter_on)\n//msg.payload = \"chocolate\"\nflow.set(\"$parent.twitter_search\",msg.payload)\nmsg.twitter_search=msg.payload\nmsg.twitter_on = twitter_on ? \"ON\" : \"OFF\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "flow.set(\"twitter_on\",false)\nlet msg = { payload: \"\" }\nmsg.twitter_on = flow.get(\"twitter_on\") ? \"ON\" : \"OFF\"\nnode.status({fill:\"gray\",shape:\"ring\",text:msg.twitter_on});\nnode.send(msg);",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "12bf12defeb60243",
                "9baf0c949fbdde64"
            ]
        ]
    },
    {
        "id": "9baf0c949fbdde64",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "",
        "func": "let color=msg.twitter_on==\"ON\"?\"green\":\"gray\"\nmsg.payload=({fill:color,shape:\"dot\",text:msg.twitter_on+\" Search: \"+msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "db38738f211fe984",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "Set Test Data",
        "func": "flow.set(\"twitter_search\",msg.twitter_search)\nmsg.language=\"en\"\n//msg.endpoint=global.get(\"globals\").dev0.url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "b36ca702392d45de",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Process speech",
        "func": "let speech=msg.tweet.text\nif(msg.tweet.user) {\n    if(msg.tweet.user.screen_name) {\n        speech += \". tweeted by: \" + msg.tweet.user.screen_name\n    }\n    if(msg.tweet.user.location) {\n        speech += \", \" + msg.tweet.user.location\n    }\n}\nmsg.payload=speech\nmsg.payload=msg.payload.replace(/http(\\S+)/g,\"\")\nmsg.payload=msg.payload.replace(/_/g,\" \")\nmsg.level=global.get(\"globals\").speech_volume\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "da73d9101d84a872"
            ]
        ]
    },
    {
        "id": "da73d9101d84a872",
        "type": "switch",
        "z": "b77158335238532e",
        "name": "",
        "property": "cmd_sentiment",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Default",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Up",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Down",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "08d53ce632f3ceff",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "Settings",
        "func": "// see On Start",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst Globals = {\n    \"debug\": false,\n    \"data_source\" : \"file\",\n    \"speech_volume\" : 95,\n    \"dev0\" : {\n        url: \"192.168.0.115\",\n        enabled: true\n    },\n    \"dev1\" : {\n        url: \"192.168.0.105\",\n        enabled: true\n    }\n}\nglobal.set(\"globals\",Globals)",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 360,
        "wires": [
            []
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "7857e13809b2a289",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Debug Filter",
        "func": "if(msg.topic!=\"control\") {\n    msg.debug_style=global.get(\"globals\").debug ? \"\" : \"display:none\"\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "ee4c480b39108e75"
            ]
        ]
    },
    {
        "id": "5c23d09cc53d8bf1",
        "type": "http request",
        "z": "41efa1154190c24d",
        "name": "Spankulator",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{{endpoint}}}}/{{{{query}}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 550,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "72ab58c8cba0a9ca",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Process tweet",
        "func": "if(msg.tweet) {\n    if(msg.tweet.extended_tweet) {\n        msg.tweet.text = msg.tweet.extended_tweet.full_text\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "b36ca702392d45de",
                "0b31b19fc634e035"
            ]
        ]
    },
    {
        "id": "48a4b94afe5e33f2",
        "type": "subflow:b77158335238532e",
        "z": "a0954fe29f87ceff",
        "name": "Process UI",
        "env": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "352aa494d8ddcbfe"
            ],
            [
                "230c56953c36b358"
            ],
            [
                "1bf7c66b0d91f2d0"
            ],
            [
                "fd8285b77b157c7e"
            ]
        ]
    },
    {
        "id": "352aa494d8ddcbfe",
        "type": "ui_template",
        "z": "a0954fe29f87ceff",
        "group": "8bb6231cf84625a5",
        "name": "UI Display",
        "order": 1,
        "width": "14",
        "height": "8",
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Sigmar+One&family=Amita:wght@700&family=Black+Ops+One&family=Bungee+Inline&family=Chewy&family=Courier+Prime:wght@700&family=Creepster&family=Emilys+Candy&family=Freckle+Face&family=Lakki+Reddy&family=Metal+Mania&family=Mystery+Quest&family=New+Rocker&family=Oleo+Script&family=Rock+Salt&family=Rye&family=Shrikhand&family=UnifrakturCook:wght@700&display=swap');\n    /*.nr-dashboard-theme {*/\n    /*    font-family: copperplate !important;*/\n    /*}*/\n    /*.nr-dashboard-cardcontainer {*/\n    /*    height: 500px !important;*/\n    /*}*/\n    body.nr-dashboard-theme md-content {\n        background-image: url('https://www.greenlightdevelopment.com/wp-content/plugins/gld_demos/alien_landers/images/spacegame/stars.gif');\n    }\n    ui-card-panel, md-card {\n        background-color: transparent !important;\n        border: none !important;\n    }\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n        color: #567;\n        font-family: 'Sigmar One', cursive;\n        font-size: 3em;\n    }\n    #toolbar {\n        display: none;\n    }\n    #the_image {\n        display: none;\n    }\n    #Greenface_Labs_Oumuamua {\n        margin-top: 35px;\n    }\n    #tweet {\n        margin: 36px;\n        min-height: 485px;\n        font-size: 3em;\n        padding: 25px;\n        transition-duration: 4s;\n        opacity: 1;\n    }\n    #tweet span {\n        text-shadow: 2px 2px #000;\n    }\n    #tweet.Down span {\n        color: #417940 !important;\n    }\n    #tweet.Up span {\n        color: #bb422f !important;\n    }\n    #tweet.Default span {\n        color: blue !important;\n        text-shadow: none;\n    }\n    #user {\n        padding-bottom: 1em;\n        position: absolute;\n        bottom: 5px;\n        width: 96%;\n    }\n    #user * {\n        float: right;\n    }\n    #user div {\n        margin-right: 1em;\n    }\n    #user_location {\n        color: #dda;\n    }\n    .Init {\n        opacity: 0 !important;\n    }\n    .Test, .Default {\n        color: #333;\n        background-color: #ddd;\n        background-image: linear-gradient(#ee0, #aaa);\n    }\n    .Up_1 {\n        background-image: linear-gradient(yellow 50%, green 90%);\n        font-family: 'Oleo Script', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_2 {\n        background-image: linear-gradient(yellow 40%, green 90%);\n        font-family: 'Shrikhand', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_3 {\n        background-image: linear-gradient(yellow 30%, green 90%);\n        font-family: 'Rock Salt', cursive !important;\n        font-size: 2em !important;\n    }\n    .Up_4 {\n        background-image: linear-gradient(yellow 20%, green 90%);\n        font-family: 'Chewy', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_5 {\n        background-image: linear-gradient(yellow 10%, green 90%);\n        font-family: 'Amita', cursive !important;\n        font-size: 2.7em !important;\n    }\n    .Up_6 {\n        background-image: linear-gradient(yellow 0%, green 90%);\n        font-family: 'Lakki Reddy', cursive !important;\n        font-size: 3em !important;\n        line-height: 1.4em !important;\n    }\n    .Up_7 {\n        background-image: linear-gradient(yellow -10%, green 90%);\n        font-family: 'Freckle Face', cursive !important;\n        font-size: 3em !important;\n        line-height: 1.5em !important;\n    }\n    .Up_8 {\n        background-image: linear-gradient(yellow -20%, green 90%);\n        font-family: 'Oleo Script', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_9 {\n        background-image: linear-gradient(yellow -30%, green 90%);\n        font-family: 'Mystery Quest', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_10 {\n        background-image: linear-gradient(yellow -40%, green 90%);\n        font-family: 'Emilys Candy', cursive !important;\n        font-size: 3.3em !important;\n    }\n    .Up {\n        color: #617;\n        background-color: #5a5;\n        /*background-image: linear-gradient(green, yellow);*/\n        /*font-family: 'Alfa Slab One', cursive !important;*/\n    }\n    .Down_1 {\n        background-image: linear-gradient(yellow 50%, red 90%);\n        font-family: 'Courier Prime', cursive !important;\n    }\n    .Down_2 {\n        background-image: linear-gradient(yellow 40%, red 90%);\n        font-family: 'Creepster', cursive !important;\n    }\n    .Down_3 {\n        background-image: linear-gradient(yellow 30%, red 90%);\n        font-family: 'Rock Salt', cursive !important;\n        font-size: 2em !important;\n    }\n    .Down_4 {\n        background-image: linear-gradient(yellow 20%, red 90%);\n        font-family: 'Metal Mania', cursive !important;\n    }\n    .Down_5 {\n        background-image: linear-gradient(yellow 10%, red 90%);\n        font-family: 'UnifrakturCook', cursive !important;\n        font-size: 3.5em !important;\n        letter-spacing: 2px;\n    }\n    .Down_6 {\n        background-image: linear-gradient(yellow 0%, red 90%);\n        font-family: 'Creepster', cursive !important;\n        line-height: 1.3em;\n    }\n    .Down_7 {\n        background-image: linear-gradient(yellow -10%, red 90%);\n        font-family: 'Rock Salt', cursive !important;\n        font-size: 2em !important;\n    }\n    .Down_8 {\n        background-image: linear-gradient(yellow -20%, red 90%);\n        font-family: 'Metal Mania', cursive !important;\n    }\n    .Down_9 {\n        background-image: linear-gradient(yellow -30%, red 90%);\n        font-family: 'Rock Salt', cursive !important;\n        font-size: 2em !important;\n    }\n    .Down_10 {\n        background-image: linear-gradient(yellow -40%, red 90%);\n        font-family: 'Metal Mania', cursive !important;\n    }\n    .Down {\n        color: black;\n        background-color: #f77;\n        /*background-image: linear-gradient(yellow 50%, red 90%);*/\n        /*font-family: 'Rock Salt', cursive;\n        font-family: 'Freckle Face', cursive;*/\n    }\n    \n</style>\n<div id=\"tweet\" ng-bind-html=\"msg.tweet.text\" class=\"{{msg.cmd_sentiment}} {{msg.tweet_class}}\"></div>\n<div><img id=\"the_image\" ng-show=\"msg.img\" ng-src=\"{{msg.img}}\" /></div>\n<div id=\"user\">\n    <img src=\"{{msg.tweet.user.profile_image_url}}\" ng-hide=\"{{msg.cmd_name==='Init'}}\" />\n    <div id=\"user_location\" ng-bind-html=\"msg.location.place\"></div>\n    <div ng-bind-html=\"msg.tweet.user.screen_name\"></div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 670,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "230c56953c36b358",
        "type": "ui_audio",
        "z": "a0954fe29f87ceff",
        "name": "Default talker",
        "group": "8bb6231cf84625a5",
        "voice": "Microsoft David - English (United States)",
        "always": true,
        "x": 670,
        "y": 460,
        "wires": []
    },
    {
        "id": "1bf7c66b0d91f2d0",
        "type": "ui_audio",
        "z": "a0954fe29f87ceff",
        "name": "Up Talker",
        "group": "8bb6231cf84625a5",
        "voice": "Microsoft Zira - English (United States)",
        "always": "",
        "x": 660,
        "y": 500,
        "wires": []
    },
    {
        "id": "fd8285b77b157c7e",
        "type": "ui_audio",
        "z": "a0954fe29f87ceff",
        "name": "Down talker",
        "group": "8bb6231cf84625a5",
        "voice": "Microsoft Mark - English (United States)",
        "always": "",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "64a4fd6ba25167be",
        "type": "status",
        "z": "a0954fe29f87ceff",
        "name": "Talker status",
        "scope": [
            "230c56953c36b358",
            "1bf7c66b0d91f2d0",
            "fd8285b77b157c7e"
        ],
        "x": 670,
        "y": 600,
        "wires": [
            [
                "5f7dd9f90f0385bd"
            ]
        ]
    },
    {
        "id": "5f7dd9f90f0385bd",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "",
        "func": "flow.set(\"talker_status\",msg.status.text)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "0b31b19fc634e035",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Enhance Display",
        "func": "if(msg.tweet) {\n    const twitter_search = flow.get(\"$parent.$parent.twitter_search\")\n    if(twitter_search) {\n        let reg = new RegExp(twitter_search, \"gi\");\n        msg.tweet.text=msg.tweet.text.replace(reg,`<span>${twitter_search}</span>`)\n    }\n}\n\ntry {\n   msg.img=msg.tweet.extended_entities.media[0].media_url \n} catch(err) {\n    //node.warn(\"No image!\")\n    msg.img=\"\"\n}\n\nmsg.tweet_class=msg.cmd_name.replace(\" \",\"_\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "515f5b84e49dbfe8",
        "type": "function",
        "z": "41efa1154190c24d",
        "name": "",
        "func": "const globals = global.get(\"globals\")\nmsg.enabled=globals[msg.device].enabled\nmsg.enabled=true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eb69d32d44bd76d9",
        "type": "switch",
        "z": "41efa1154190c24d",
        "name": "",
        "property": "enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "5c23d09cc53d8bf1"
            ],
            [
                "a5820b2710a91bb4"
            ]
        ]
    },
    {
        "id": "a5820b2710a91bb4",
        "type": "function",
        "z": "41efa1154190c24d",
        "name": "",
        "func": "node.warn(\"Skipping\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ed476148076e1623",
        "type": "http request",
        "z": "3581784ff799b3aa",
        "name": "SYNTH",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{endpoint}}}/{{{query}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 940,
        "y": 40,
        "wires": [
            [
                "87313341488d5136"
            ]
        ]
    },
    {
        "id": "37980c96a4b8052a",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Status",
        "func": "const text = \"From \"+global.get(\"globals\").data_source + \": \" + msg.cmd_name \nmsg.payload=({text:text});\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"queuing\",false)\nflow.set(\"queue_len\",0)",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b717160d2430598a",
        "type": "debug",
        "z": "b77158335238532e",
        "name": "UI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 40,
        "wires": []
    },
    {
        "id": "75b3c36e64088333",
        "type": "switch",
        "z": "3581784ff799b3aa",
        "name": "",
        "property": "device_enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 40,
        "wires": [
            [
                "ed476148076e1623"
            ],
            [
                "87313341488d5136"
            ]
        ]
    },
    {
        "id": "010b4454e988afe3",
        "type": "subflow:3581784ff799b3aa",
        "z": "a0954fe29f87ceff",
        "name": "",
        "env": [],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "7857e13809b2a289",
                "17d96389be74e6c0"
            ]
        ]
    },
    {
        "id": "fd53b402f0061831",
        "type": "function",
        "z": "3581784ff799b3aa",
        "name": "Process Command",
        "func": "// meta-commands MUST be followed by non-meta command\nmsg.device=\"dev0\"\nconst globals = global.get(\"globals\")\nconst cmds = msg.commands\nlet ctr = msg.counter\nif(ctr<cmds.length) {\n    let cmd = cmds[ctr]\n    if(cmd>\"\") {\n        if(cmd.indexOf(\"#dev\")==0) {\n            msg.device=cmd.replace('#',\"\")\n            // check to make sure it isn't bogus\n            switch(msg.device) {\n                case \"dev0\":\n                case \"dev1\":\n                    break;\n                default:\n                    node.warn(`Replacing ${msg.device} with dev0`)\n                    msg.device=\"dev0\"\n            }\n            msg.endpoint=globals[msg.device].url\n            msg.device_enabled=globals[msg.device].enabled\n            node.warn(msg)\n            ctr++\n        }\n        if(cmd.indexOf(\"#delay\")==0) {\n            node.warn(\"Hit a delay!\")\n            const parts = cmd.split(\":\")\n            msg.script_delay=parts[1]\n            ctr++\n        } else {\n            msg.script_delay=null\n        }\n    }\n    // msg.device_enabled=true\n    // todo: check that cmds[ctr] is non-meta\n    msg.query=cmds[ctr]\n    msg.counter = ctr\n    return msg;\n} else {\n    node.warn(\"End of the line...\")\n    //return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "5bca6b83bff576dc"
            ]
        ]
    },
    {
        "id": "87313341488d5136",
        "type": "function",
        "z": "3581784ff799b3aa",
        "name": "Increment CMD Counter",
        "func": "msg.counter++\nif(msg.counter >= msg.commands.length) {\n    msg.topic=\"control\"\n    msg.payload=\"trigger\"\n    //msg.counter=0\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "fd53b402f0061831"
            ]
        ]
    },
    {
        "id": "5c152458e886a684",
        "type": "function",
        "z": "3581784ff799b3aa",
        "name": "Set Commands",
        "func": "if(msg.payload[0]!=undefined) {\n    // set commands\n    msg.commands = msg.payload[0].commands\n    \n    // set counter\n    msg.counter = 0\n    \n    // set view time. Dwell at least this long\n    msg.view_time = parseInt(msg.payload[0].delay,10)\n\n    // set command sentiment\n    const cmd_parts = msg.payload[0].name.split(\" \")\n    msg.cmd_sentiment=cmd_parts[0]\n    \n    return msg;\n    \n} else {\n    node.warn(msg.query.name + \": Not Found!\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"counter\",0)\n",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 120,
        "wires": [
            [
                "fd53b402f0061831"
            ]
        ]
    },
    {
        "id": "5bca6b83bff576dc",
        "type": "switch",
        "z": "3581784ff799b3aa",
        "name": "",
        "property": "script_delay",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 120,
        "wires": [
            [
                "75b3c36e64088333"
            ],
            [
                "ad9d1126bcaccfa1"
            ]
        ]
    },
    {
        "id": "081725d5474ddfcf",
        "type": "delay",
        "z": "3581784ff799b3aa",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 880,
        "y": 260,
        "wires": [
            [
                "3cba783275f616cb"
            ]
        ]
    },
    {
        "id": "ad9d1126bcaccfa1",
        "type": "change",
        "z": "3581784ff799b3aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "script_delay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 260,
        "wires": [
            [
                "081725d5474ddfcf"
            ]
        ]
    },
    {
        "id": "3cba783275f616cb",
        "type": "change",
        "z": "3581784ff799b3aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 260,
        "wires": [
            [
                "87313341488d5136"
            ]
        ]
    }
]