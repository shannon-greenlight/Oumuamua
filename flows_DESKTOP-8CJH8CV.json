[
    {
        "id": "ef4cb095a7656cc5",
        "type": "tab",
        "label": "Oumuamua",
        "disabled": false,
        "info": ""
    },
    {
        "id": "08d39d48f2233c7a",
        "type": "tab",
        "label": "Get Mongo Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a0954fe29f87ceff",
        "type": "subflow",
        "name": "Do Script",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 260,
                "wires": [
                    {
                        "id": "d834998fd2533b91"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 300,
                "wires": [
                    {
                        "id": "010b4454e988afe3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 140,
            "wires": [
                {
                    "id": "5a1ebb28ce1c7929",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "90cfb10a56fd7196",
        "type": "subflow",
        "name": "Get Script",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "5656aa8175c7222b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 80,
                "wires": [
                    {
                        "id": "7cc11906534b4543",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 720,
            "y": 200,
            "wires": [
                {
                    "id": "37980c96a4b8052a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "80f13c56f5360838",
        "type": "subflow",
        "name": "Twitter Scanner",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "4c6fcf4b1972aa16"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 80,
                "wires": [
                    {
                        "id": "06bb62c348b36af2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "status": {
            "x": 620,
            "y": 240,
            "wires": [
                {
                    "id": "9baf0c949fbdde64",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b77158335238532e",
        "type": "subflow",
        "name": "Process UI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "72ab58c8cba0a9ca"
                    },
                    {
                        "id": "8f0eb1af610523e6"
                    },
                    {
                        "id": "ac5d82c807760246"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "0b31b19fc634e035",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 120,
                "wires": [
                    {
                        "id": "da73d9101d84a872",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 160,
                "wires": [
                    {
                        "id": "da73d9101d84a872",
                        "port": 1
                    }
                ]
            },
            {
                "x": 700,
                "y": 200,
                "wires": [
                    {
                        "id": "da73d9101d84a872",
                        "port": 2
                    }
                ]
            },
            {
                "x": 700,
                "y": 240,
                "wires": [
                    {
                        "id": "8f0eb1af610523e6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 340,
            "y": 360,
            "wires": [
                {
                    "id": "ac5d82c807760246",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "41efa1154190c24d",
        "type": "subflow",
        "name": "Subflow 4",
        "info": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "eb69d32d44bd76d9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "5c23d09cc53d8bf1",
                        "port": 0
                    },
                    {
                        "id": "a5820b2710a91bb4",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "3581784ff799b3aa",
        "type": "subflow",
        "name": "Exe Commands",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "fd53b402f0061831"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 120,
                "wires": [
                    {
                        "id": "87313341488d5136",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "11a5884a1e26f777",
        "type": "subflow",
        "name": "Init Scripts",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "b5f09f1928bf2ccc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 200,
                "wires": [
                    {
                        "id": "909347dd458280d9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 800,
            "y": 40,
            "wires": [
                {
                    "id": "539b1bb86df82852",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7de09d5372187b67",
        "type": "subflow",
        "name": "3D Scene",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 780,
                "y": 200,
                "wires": [
                    {
                        "id": "8cdc268559c567bd"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 460,
            "y": 220,
            "wires": [
                {
                    "id": "3c73ab739fb4802a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4f82a66a.93b828",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.0.111",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "54588401fea63e01",
        "type": "mongodb",
        "hostname": "cluster0.j5ukc.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "",
        "port": "27017",
        "db": "Omuamua",
        "name": ""
    },
    {
        "id": "97825d26110221fc",
        "type": "twitter-credentials",
        "screen_name": "GreenfaceLabs"
    },
    {
        "id": "aeb4069b6516d878",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Gill Sans,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Gill Sans,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 80,
                "sy": 80,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8bb6231cf84625a5",
        "type": "ui_group",
        "z": "a0954fe29f87ceff",
        "name": "Oumuamua",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "2a033f5be28e93e0",
        "type": "ui_group",
        "z": "a0954fe29f87ceff",
        "name": "Debug",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ea6debe9da8aaf7a",
        "type": "ui_tab",
        "name": "Greenface Labs",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c79e57f6fc5202d5",
        "type": "ui_group",
        "name": "Oumuamua",
        "tab": "ea6debe9da8aaf7a",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "ebd8e8684f7f7eda",
        "type": "ui_group",
        "name": "Debug",
        "tab": "ea6debe9da8aaf7a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c6bb1eb5.edd3d",
        "type": "websocket-listener",
        "path": "/ws/publish",
        "wholemsg": "true"
    },
    {
        "id": "a5db9e65.7dd36",
        "type": "websocket-listener",
        "path": "/ws/receive",
        "wholemsg": "true"
    },
    {
        "id": "0e93824c5fd84cfd",
        "type": "websocket-listener",
        "path": "/ws/publish_chart",
        "wholemsg": "false"
    },
    {
        "id": "eca071f0d6730181",
        "type": "websocket-listener",
        "path": "/ws/receive_chart",
        "wholemsg": "false"
    },
    {
        "id": "a6aeaef83ff76327",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "tweet",
                "v": "{  \"text\" : \"\" }",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "Trigger",
        "payload": "{\"name\":\"Init\"}",
        "payloadType": "json",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "b84ec5acc38872a7",
        "type": "subflow:a0954fe29f87ceff",
        "z": "ef4cb095a7656cc5",
        "name": "Do Script",
        "env": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "ab3d064cfcdb6315",
                "7c418a96356519c4"
            ]
        ]
    },
    {
        "id": "6b769294dec11207",
        "type": "subflow:90cfb10a56fd7196",
        "z": "ef4cb095a7656cc5",
        "name": "Get Script",
        "env": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "b84ec5acc38872a7"
            ]
        ]
    },
    {
        "id": "6ef2c13140bffd5b",
        "type": "comment",
        "z": "ef4cb095a7656cc5",
        "name": "Oumuamua",
        "info": "# Spankulator Command Processor\nThe SCP runs scripts that control The Spankulator.\nThe scripts are found in either a MongoDB Atlas or in a JSON formatted text file.\nEach script contains an array of objects in the format:\n{\n    name: String,\n    commands: Array of Strings,\n    delay: msecs to delay after script is run\n}\n * The commands are sent to the Spankulator via HTTP to the endpoint specified in the Spankulator's WiFi settings.\n * Commands are sent one-by-one by the **HTTP Sender** node that waits for the Spankulator's response before sending the next command.\n * Edit the **Start** node's payload parameter to enter the name of the script that is to be executed. eg. {\"name\":\"Up\"}\n * This payload is used by the **Get Data** node which delivers the script data to the **Set Commands** node.\n * A warning will be issued to the debug panel if the script is not found.\n * If the script is found, **Set Commands** sets the flow variables _commands_ and _delay_ to the data found in the script. The payload is ignored beyond this point.\n * The **HTTP Sender** node uses flow variables to parse and send the commands.",
        "x": 550,
        "y": 40,
        "wires": []
    },
    {
        "id": "5656aa8175c7222b",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Process MSG",
        "func": "function make_unique(currentValue, index, arr){\n    return arr.indexOf(currentValue)===index\n}\n\nif(msg.sentiment) {\n    msg.sentiment.positive = msg.sentiment.positive.filter(make_unique)\n    msg.sentiment.negative = msg.sentiment.negative.filter(make_unique)\n}\nconst twitter_scanner = global.get(\"twitter_scanner\")\nmsg.search_terms=twitter_scanner.search.get()\nmsg.data_source = global.get(\"settings\").data_source\nmsg.cmd_name=msg.payload.name\nmsg.query=msg.payload\nflow.set(\"$parent.latest_select\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "37980c96a4b8052a",
                "cecc26fbe3db1455"
            ]
        ]
    },
    {
        "id": "c204c43e58c9ed0d",
        "type": "comment",
        "z": "a0954fe29f87ceff",
        "name": "msg ignored at input",
        "info": "",
        "x": 110,
        "y": 760,
        "wires": []
    },
    {
        "id": "cecc26fbe3db1455",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Find Data",
        "func": "// looks through all scripts to find script specd by msg.query.name\nfunction checkName(script) {\n    let search_term=msg.query.name\n    return script.name == search_term;\n}\n//let temp = msg.payload\nlet temp = global.get(\"info\").scripts\nmsg.payload=[]\nmsg.payload[0]=temp.find(checkName)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "e6362dd99525539c"
            ]
        ]
    },
    {
        "id": "261f0e5136f2ad95",
        "type": "comment",
        "z": "90cfb10a56fd7196",
        "name": "",
        "info": "Sub Flow input payload contains search query object\n{ name : \"search_term\" }\n\nGet File data overwrites payload, so search object is put into msg.query\n\nReturns data object with commands and delay",
        "x": 120,
        "y": 200,
        "wires": []
    },
    {
        "id": "c96c313110f1d0e3",
        "type": "sentiment",
        "z": "80f13c56f5360838",
        "name": "",
        "property": "payload",
        "x": 780,
        "y": 80,
        "wires": [
            [
                "06bb62c348b36af2"
            ]
        ]
    },
    {
        "id": "6039339d5205e564",
        "type": "debug",
        "z": "80f13c56f5360838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sentiment.score",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 420,
        "wires": []
    },
    {
        "id": "06bb62c348b36af2",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "Message Processor",
        "func": "let score = msg.sentiment.score\n// score=parseInt(Math.random()*21,10)-10\nlet sentiment = score > 0 ? \"Up \" : \"Down \"\nif(score>10) {\n    score=10\n}\nif(score<-10) {\n    score=-10\n}\nscore = Math.abs(score)\nif(score >= global.get(\"settings\").minimum_sentiment) {\n    msg.payload = { \"name\" : sentiment+score }\n    if(msg.sentiment.score==0) {\n        msg.payload = { \"name\" : \"Default\" }\n    }\n    msg.source=\"twitter\"\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "78f6b9daba7558b0",
        "type": "debug",
        "z": "80f13c56f5360838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "tweet",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 180,
        "wires": []
    },
    {
        "id": "90b884e16d0f35a3",
        "type": "subflow:80f13c56f5360838",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "env": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "a19ad4b6cb68ac7e",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "On/Off",
        "props": [
            {
                "p": "twitter_search",
                "v": "supreme court,roe,abortion",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "90b884e16d0f35a3"
            ]
        ]
    },
    {
        "id": "88f28cd2c48a3b09",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "Twitter Gate",
        "func": "const twitter_scanner=global.get(\"twitter_scanner\")\nlet tweet_contains_search_term=false\nfor(let i=0;i<twitter_scanner.search.search_parts.length;i++) {\n    if(msg.tweet.text.indexOf(twitter_scanner.search.search_parts[i])!=-1) {\n        tweet_contains_search_term=true\n    }\n}\nif(twitter_scanner.gate.enabled && tweet_contains_search_term && msg.lang==\"en\") {\n    msg.overrides=twitter_scanner.overrides\n    return msg;\n} else {\n    // don't return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [
                "c96c313110f1d0e3"
            ]
        ]
    },
    {
        "id": "49b46025504b3c51",
        "type": "debug",
        "z": "80f13c56f5360838",
        "name": "Twitter Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "tweet.text",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 420,
        "wires": []
    },
    {
        "id": "17d96389be74e6c0",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Script Done",
        "func": "if(msg.topic==\"control\") {\n    let delay_time=\"view_time\"\n    if(msg.cmd_name==\"Init\") {\n        delay_time=\"silent_time\"\n    }\n    msg.delay=global.get(\"settings\").get_delay(delay_time)\n    return msg;   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 400,
        "wires": [
            [
                "4a431652fb63bd1b"
            ]
        ]
    },
    {
        "id": "c543ab0b894d0bda",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Next Script",
        "func": "let chk_talker_status=function(){\n    let d2 = new Date();\n    const now = d2.getTime();\n    const elapsed = (now - global.get(\"info\").talk_start_time)/1000\n    //node.warn(`Elapsed time: ${elapsed}`)\n    const talker_status = global.get(\"talker\").status.text\n    if(elapsed>60 || (talker_status!=\"playing\" && msg.cmd_name!=\"Init\")) {\n        msg.topic=\"initializing\"\n        msg.payload={name: \"Init\"}\n        msg.cmd_name=\"Init\"\n        msg.commands=global.get(\"find_script\")(\"Init\").commands\n        msg.counter=0\n        \n        msg.tweet={}\n        msg.user={}\n        msg.location={}\n        node.send(msg)\n        \n    } else {\n        setTimeout(chk_talker_status,500)\n    }\n}\n\nconst queue = global.get(\"queue\")\nif(msg.cmd_name==\"Init\") {\n    // we're done get next message in queue\n    if(queue.len==0) {\n        queue.queuing=false\n    }\n    msg.payload=\"trigger\"\n    return msg;\n} else {\n    let d = new Date();\n    global.get(\"info\").talk_start_time = d.getTime();\n    chk_talker_status()    \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "73d9e25da19621e7"
            ]
        ]
    },
    {
        "id": "54ddcdf1a3f321fa",
        "type": "q-gate",
        "z": "a0954fe29f87ceff",
        "name": "Queue",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "212e0062caa9429e"
            ]
        ]
    },
    {
        "id": "456369ab92f7d534",
        "type": "status",
        "z": "a0954fe29f87ceff",
        "name": "Q Status",
        "scope": [
            "54ddcdf1a3f321fa"
        ],
        "x": 120,
        "y": 80,
        "wires": [
            [
                "7dd170435563c70f"
            ]
        ]
    },
    {
        "id": "5a1ebb28ce1c7929",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Set Node Status",
        "func": "// msg only contains timestamp. All data should come from globals\nconst talker_status = global.get(\"talker\").status.text\nconst queue = global.get(\"queue\")\nconst qlen=queue.len\nmsg.payload=({fill:\"green\",shape:\"dot\",text:\"Queue: \"+queue.status+\" \"+qlen});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ab18a91e5ecd1534",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Reset Queue",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "reset",
        "payloadType": "str",
        "x": 590,
        "y": 320,
        "wires": [
            [
                "b84ec5acc38872a7"
            ]
        ]
    },
    {
        "id": "d834998fd2533b91",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Queue Ctrl",
        "func": "const queue = global.get(\"queue\")\nif(msg.topic==\"control\") {\n    // might be a reset\n    queue.queuing=false\n    global.get(\"twitter_scanner\").recent_tweets.reset()\n    global.get(\"info\").cmd_nname=\"\"\n    return msg\n} else {\n    let qmsg = \"open\"\n    if(queue.queuing) {\n        qmsg=\"queue\"\n    }\n    let ctrlmsg = {\n        payload: qmsg,\n        topic: \"control\"\n    }\n    node.send(ctrlmsg)\n    queue.queuing=true\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 260,
        "wires": [
            [
                "54ddcdf1a3f321fa"
            ]
        ]
    },
    {
        "id": "9661cd55432a21c5",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "twitter_search",
                "v": "idiot",
                "vt": "str"
            },
            {
                "p": "msg.tweet.user.profile_image_url",
                "v": "http://pbs.twimg.com/profile_images/942085419868479490/6C-qwM7H_normal.jpg",
                "vt": "str"
            },
            {
                "p": "msg.location.place",
                "v": "Outer Sasquatchia",
                "vt": "str"
            },
            {
                "p": "msg.tweet.user.screen_name",
                "v": "JoeBigfoot",
                "vt": "str"
            },
            {
                "p": "msg.tweet.user.location",
                "v": "Outer Sasquatchia",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"name\":\"Up 9\"}",
        "payloadType": "json",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "db38738f211fe984"
            ]
        ]
    },
    {
        "id": "a3c08b2c4234f9d3",
        "type": "debug",
        "z": "a0954fe29f87ceff",
        "name": "Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 220,
        "wires": []
    },
    {
        "id": "12bf12defeb60243",
        "type": "twitter in",
        "z": "80f13c56f5360838",
        "twitter": "97825d26110221fc",
        "tags": "",
        "user": "false",
        "name": "Scanner",
        "inputs": 1,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "88f28cd2c48a3b09"
            ]
        ]
    },
    {
        "id": "4c6fcf4b1972aa16",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "Set Twitter",
        "func": "const twitter_scanner = global.get(\"twitter_scanner\")\nconst twitter_on = twitter_scanner.gate.toggle()\n\nmsg.twitter_on = twitter_on ? \"ON\" : \"OFF\"\n\n// twitter scanner needs search term in payload\nif(twitter_on) {\n    twitter_scanner.search.set(msg)\n    msg.payload=twitter_scanner.search.get()\n} else {\n    // turn twitter scanner off with blank payload\n    msg.payload=\"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "12bf12defeb60243",
                "9baf0c949fbdde64"
            ]
        ]
    },
    {
        "id": "9baf0c949fbdde64",
        "type": "function",
        "z": "80f13c56f5360838",
        "name": "",
        "func": "const twitter_scanner=global.get(\"twitter_scanner\")\nconst color=twitter_scanner.gate.enabled? \"green\":\"gray\"\nconst text=twitter_scanner.gate.enabled ? \"ON\" : \"OFF\"\nmsg.payload=({fill:color,shape:\"dot\",text:text+\" Search: \"+twitter_scanner.search.get()});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst twitter_scanner=global.get(\"twitter_scanner\")\nconst color=twitter_scanner.gate.enabled? \"green\":\"gray\"\nconst text=twitter_scanner.gate.enabled ? \"ON\" : \"OFF\"\nlet msg={}\nmsg.payload=({fill:color,shape:\"dot\",text:text+\" Search: \"+twitter_scanner.search.get()});\nnode.send(msg);\n",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "db38738f211fe984",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "Set Test Data",
        "func": "msg.twitter_search=\"pancakes\"\nglobal.get(\"twitter_scanner\").search.set(msg)\nmsg.language=\"en\"\n// msg.tweet.text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum efficitur elit quis sem volutpat venenatis. Ut ullamcorper pharetra dui eget eleifend. Aenean eu lobortis justo. Aliquam nisl ante, eleifend nec quam id, dapibus pretium ex. Aliquam et leo quam. In non nibh et ante maximus porttitor a non ipsum.\"\n//msg.tweet.text=\"Hey. Stop that! You idiot.\"\nmsg.tweet.text=global.get(\"lipsum\").get_chars(Math.floor(Math.random() * 40)+240,\"text\")\nmsg.sentiment = {\n    score: 6,\n    positive : [\n        \"favorite\",\n        \"favorite\",\n        \"alive\",\n        \"favorite\"\n        ],\n    negative : []\n}\nmsg.tweet.extended_entities = {\n       media : [{ media_url: \"\"}]\n}\n// msg.tweet.extended_entities.media[0].media_url=\"http://pbs.twimg.com/media/Ev5HTOuVoAQjIfd.jpg\"\nmsg.tweet.extended_entities.media[0].media_url=\"http://pbs.twimg.com/media/E_GBCEnX0AIoPk-.jpg\"\n// msg.tweet.extended_entities.media[0].media_url=\"https://www.greenfacelabs.com/wp-content/uploads/2021/06/the-signal.gif\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "b36ca702392d45de",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Process speech",
        "func": "function add_word(speech, currentWord, currentIndex, arr) {\n    let and = \" \"\n    if(currentIndex==arr.length-1 && arr.length>1) {\n        and = \" and \"\n    }\n    return `${speech} ${and} ${currentWord}. `\n}\n\nif(msg.cmd_name!=\"Init\") {\n    let pre_speech=\"\"\n    if(msg.sentiment) {\n        if(msg.sentiment.positive.length && !msg.testing) {\n            pre_speech=`I see ${msg.sentiment.positive.length} positive word${msg.sentiment.positive.length==1 ? \"\" : \"s\"}. `\n            pre_speech+=msg.sentiment.positive.reduce(add_word,\"\")\n            // msg.sentiment.positive.forEach(function(value){\n            //     pre_speech += value +\". \"\n            // })\n        }\n        if(msg.sentiment.negative.length && !msg.testing) {\n            pre_speech+=` I see ${msg.sentiment.negative.length} negative word${msg.sentiment.negative.length==1 ? \"\" : \"s\"}. `\n            pre_speech+=msg.sentiment.negative.reduce(add_word,\"\")\n            // msg.sentiment.negative.forEach(function(value){\n            //     pre_speech += value +\". \"\n            // })\n        }\n    }\n    pre_speech += `This tweet is ${msg.cmd_name}! `\n    let speech=pre_speech+msg.tweet.text+\". \"\n    if(msg.tweet.user) {\n        if(msg.tweet.user.screen_name) {\n            speech += \". tweeted by: \" + msg.tweet.user.screen_name\n        }\n        if(msg.tweet.user.location) {\n            speech += \", from \" + msg.tweet.user.location\n        }\n    }\n    msg.payload=speech\n    msg.payload=msg.payload.replace(/http(\\S+)/g,\"\")\n    msg.payload=msg.payload.replace(/_/g,\" \")\n    msg.level=global.get(\"settings\").speech_volume\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "da73d9101d84a872"
            ]
        ]
    },
    {
        "id": "da73d9101d84a872",
        "type": "switch",
        "z": "b77158335238532e",
        "name": "",
        "property": "cmd_sentiment",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Default",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Up",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Down",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "08d53ce632f3ceff",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "Settings",
        "func": "// see On Start",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst Settings = {\n    \"debug\": true,\n    \"data_source\" : \"file\",\n    \"filename\" : \"C:\\\\Users\\\\shann\\\\.node-red\\\\projects\\\\Oumuamua\\\\assets\\\\simple.json\",\n    \"old_filename\" : \"C:\\\\Users\\\\Shann\\\\Dropbox\\\\moog\\\\spankulator\\\\node-red\\\\docs\\\\sentiment_4.json\",\n    \"speech_volume\" : 95,\n    \"view_time\": 16000,\n    \"silent_time\": 5000,\n    \"require_image\": true,\n    \"minimum_sentiment\": 1,\n    \"dev0\" : {\n        url: \"192.168.0.108\",\n        enabled: true\n    },\n    \"dev1\" : {\n        url: \"192.168.0.109\",\n        enabled: true\n    },\n    \"get_delay\" : function(time) {\n        const view_time = global.get(\"settings\")[time]\n        return view_time + Math.floor(Math.random() * view_time)\n    }\n}\nglobal.set(\"settings\",Settings)\n\nconst lipsum = {\n    text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tempor rhoncus odio, vitae fringilla neque lobortis non. Nullam in nunc at nisi ornare suscipit. Morbi congue volutpat augue, vitae tristique risus fringilla ac. Duis massa ante, blandit in commodo eget, auctor in libero. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean consectetur augue urna, id laoreet lorem gravida id. Aenean nec ante quam. Curabitur sed dolor metus. Morbi porttitor tortor id libero eleifend, in dignissim magna congue. Nam sapien felis, dictum id feugiat eu, sagittis at dolor. Nulla facilisi. Maecenas bibendum odio eu est molestie varius. Maecenas suscipit elit quam. Etiam aliquam leo turpis, at semper tellus volutpat sed. Nulla vitae sollicitudin turpis, ac congue elit.\",\n    tweet: \"RT @Upsydaizy28: A full bag of beans and bolts. 💞💕💝💖 https://t.co/Hk5fXJ1HDP RT @lanadelslay77: I’m the type of girl who would kill you and then make you pancakes 😊 https://t.co/33aLZZnRwB RT @MidnaAsh: Would you let this bat girl drain your blood? https://t.co/OtOh14r2VA\",\n    get: function(num_words,typ) {\n        if(!typ) typ=\"tweet\"\n        const parts = this[typ].split(\" \")\n        return parts.slice(0,num_words-1).join(\" \")\n    },\n    get_chars: function(num_chars,typ) {\n        if(!typ) typ=\"tweet\"\n        return this[typ].substr(0,num_chars)\n    }\n}\nglobal.set(\"lipsum\",lipsum)\n\nconst twitter_scanner={\n    overrides: { \n        \"greenface\": 5,\n        \"💖\": 5,\n        \"😂\": 5,\n        \"🤬\" : -5,\n        \"💀\" : -4,\n        \"💩\" : -2,\n        \"☠\" : -3,\n        \"😡\" : -3\n    },\n    search: {\n        search_string: \"money\",\n        search_parts: [],\n        get: function() {\n            return this.search_string;\n        },\n        set: function(msg) {\n            if(msg.twitter_search>\"\") {\n                this.search_string=msg.twitter_search\n                this.search_parts=this.search_string.split(\",\")\n            }\n        }\n    },\n    gate: {\n        enabled: false,\n        get: function() { return this.enabled },\n        set: function(f) { this.enabled=f!=0 },\n        toggle: function() {\n            this.enabled = !this.enabled\n            return this.get()\n        }\n    },\n    recent_tweets : {\n        max_tweets: 75,\n        tweets: [],\n        add_tweet: function(tweet) {\n            if(this.tweets.indexOf(tweet)>-1) {\n                console.log(\"Duplicate tweet. Dropping: \"+tweet)\n                return false\n            } else {\n                this.tweets.push(tweet)\n                if(this.tweets.length>this.max_tweets) {\n                    this.tweets.shift()\n                }\n                return true\n            }\n        },\n        reset: function() {\n            this.tweets=[]\n        },\n        debug: function() {\n            console.log(this.tweets)\n        }\n    }\n}\nglobal.set(\"twitter_scanner\",twitter_scanner)\n\nconst queue = {\n    len: 0,\n    status: \"\",\n    queuing: false\n}\nglobal.set(\"queue\",queue)\n\nconst talker = {\n    status: { text: \"unset\"}\n}\nglobal.set(\"talker\",talker)\n\nconst find_script = function(search_term) {\n    // looks through all scripts to find script specd by msg.query.name\n    let scripts = global.get(\"info\").scripts\n    return scripts.find(function(script){\n        return script.name == search_term;\n    })\n}\nglobal.set(\"find_script\",find_script)\n\nconst info = {\n    scripts: {},\n    talk_start_time: 0,\n    cmd_name: \"\"\n}\nglobal.set(\"info\",info)\n\nconst read_scripts = function(node) {\n    let msg = { \n        data_source: Settings.data_source,\n        filename: Settings.filename\n    }\n    node.send(msg)\n}\nglobal.set(\"read_scripts\",read_scripts)\n\nread_scripts(node)\n\nconst status = {\n    \"websocket in\": \"unconnected\",\n    \"websocket out\": \"unconnected\",\n    \"sockets_connected\": function(node) {\n        node.warn(this[\"websocket in\"])\n        return this[\"websocket in\"] === \"connected 1\" && this[\"websocket out\"] === \"connected 1\"\n    }\n}\nglobal.set(\"status\", status)\n\n// let msg = {\n//     data_source: Settings.data_source,\n//     filename: Settings.filename\n// }\n// node.send(msg)\n/*\nMongo DB node must be configured manually!\n*/",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "5dcf2412633e21e2"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "5c23d09cc53d8bf1",
        "type": "http request",
        "z": "41efa1154190c24d",
        "name": "Spankulator",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{{endpoint}}}}/{{{{query}}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 550,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "72ab58c8cba0a9ca",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Process tweet",
        "func": "if(msg.topic==\"control\") {\n    if(msg.tweet) {\n        if(msg.tweet.extended_tweet) {\n            msg.tweet.text = msg.tweet.extended_tweet.full_text\n        }\n        //msg.tweet.text=msg.tweet.text.replace(/http(\\S+)/g,\"\")\n    }\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "b36ca702392d45de",
                "0b31b19fc634e035"
            ]
        ]
    },
    {
        "id": "0b31b19fc634e035",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Enhance Display",
        "func": "if(msg.tweet) {\n    const search = global.get(\"twitter_scanner\").search.get()\n    //node.warn(global.get(\"twitter_scanner\").search.search_parts)\n    if(search && msg.tweet.text) {\n        global.get(\"twitter_scanner\").search.search_parts.forEach(function(currentValue, index) {\n            let reg = new RegExp(currentValue, \"gi\");\n            msg.tweet.text=msg.tweet.text.replace(reg,`<span>${currentValue}</span>`)\n        })\n        // let reg = new RegExp(search, \"gi\");\n        // msg.tweet.text=msg.tweet.text.replace(reg,`<span>${search}</span>`)\n    }\n}\n\ntry {\n   msg.img=msg.tweet.extended_entities.media[0].media_url \n} catch(err) {\n    //node.warn(\"No image!\")\n    msg.img=null\n}\n\nif(msg.tweet.text) msg.tweet.text=msg.tweet.text.replace(/http(\\S+)/g,\"\")\n\nmsg.tweet_class=msg.cmd_name.replace(\" \",\"_\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "515f5b84e49dbfe8",
        "type": "function",
        "z": "41efa1154190c24d",
        "name": "",
        "func": "const settings = global.get(\"settings\")\nmsg.enabled=settings[msg.device].enabled\nmsg.enabled=true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eb69d32d44bd76d9",
        "type": "switch",
        "z": "41efa1154190c24d",
        "name": "",
        "property": "enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "5c23d09cc53d8bf1"
            ],
            [
                "a5820b2710a91bb4"
            ]
        ]
    },
    {
        "id": "a5820b2710a91bb4",
        "type": "function",
        "z": "41efa1154190c24d",
        "name": "",
        "func": "node.warn(\"Skipping\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ed476148076e1623",
        "type": "http request",
        "z": "3581784ff799b3aa",
        "name": "SYNTH",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{endpoint}}}/{{{query}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 820,
        "y": 40,
        "wires": [
            [
                "87313341488d5136"
            ]
        ]
    },
    {
        "id": "37980c96a4b8052a",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Status",
        "func": "if(msg.cmd_name!=\"Init\") {\n    const text = msg.cmd_name \n    msg.payload=({text:text});\n    return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b717160d2430598a",
        "type": "debug",
        "z": "b77158335238532e",
        "name": "Process UI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "75b3c36e64088333",
        "type": "switch",
        "z": "3581784ff799b3aa",
        "name": "Device Enabled?",
        "property": "device_enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "ed476148076e1623"
            ],
            [
                "87313341488d5136"
            ]
        ]
    },
    {
        "id": "010b4454e988afe3",
        "type": "subflow:3581784ff799b3aa",
        "z": "a0954fe29f87ceff",
        "name": "",
        "env": [],
        "x": 960,
        "y": 300,
        "wires": [
            [
                "17d96389be74e6c0"
            ]
        ]
    },
    {
        "id": "fd53b402f0061831",
        "type": "function",
        "z": "3581784ff799b3aa",
        "name": "Process Command",
        "func": "// meta-commands MUST be followed by non-meta command\n\nmsg.device=flow.get(\"msg_device\")\nconst globals = global.get(\"settings\")\nconst cmds = msg.commands\nlet ctr = msg.counter\nif(ctr<cmds.length) {\n    let cmd = cmds[ctr]\n    if(cmd>\"\") {\n        if(cmd.indexOf(\"#dev\")==0) {\n            msg.device=cmd.replace('#',\"\")\n            // check to make sure it isn't bogus\n            switch(msg.device) {\n                case \"dev0\":\n                case \"dev1\":\n                    break;\n                default:\n                    node.warn(`Replacing ${msg.device} with dev0`)\n                    msg.device=\"dev0\"\n            }\n            flow.set(\"msg_device\",msg.device)\n            msg.endpoint=globals[msg.device].url\n            msg.device_enabled=globals[msg.device].enabled\n            //node.warn(msg)\n            ctr++\n        }\n        if(cmd.indexOf(\"#delay\")==0) {\n            //node.warn(\"Hit a delay! \"+cmd)\n            const parts = cmd.split(\":\")\n            msg.script_delay=parts[1]\n            //ctr++\n        } else {\n            msg.script_delay=null\n            //node.warn(\"No delay! \"+cmd+\" delay: \"+msg.script_delay)\n        }\n    }\n    // msg.device_enabled=true\n    // todo: check that cmds[ctr] is non-meta\n    msg.query=cmds[ctr]\n    msg.counter = ctr\n    return msg;\n} else {\n    //node.warn(\"End of the line...\")\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "5bca6b83bff576dc"
            ]
        ]
    },
    {
        "id": "87313341488d5136",
        "type": "function",
        "z": "3581784ff799b3aa",
        "name": "Increment CMD Counter",
        "func": "msg.counter++\nif(msg.counter >= msg.commands.length) {\n    msg.topic=\"control\"\n    msg.payload=\"trigger\"\n    //msg.counter=0\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "fd53b402f0061831"
            ]
        ]
    },
    {
        "id": "5bca6b83bff576dc",
        "type": "switch",
        "z": "3581784ff799b3aa",
        "name": "Delay?",
        "property": "script_delay",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 120,
        "wires": [
            [
                "75b3c36e64088333"
            ],
            [
                "ad9d1126bcaccfa1"
            ]
        ]
    },
    {
        "id": "081725d5474ddfcf",
        "type": "delay",
        "z": "3581784ff799b3aa",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "3cba783275f616cb"
            ]
        ]
    },
    {
        "id": "ad9d1126bcaccfa1",
        "type": "change",
        "z": "3581784ff799b3aa",
        "name": "Set Delay",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "script_delay",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 260,
        "wires": [
            [
                "081725d5474ddfcf"
            ]
        ]
    },
    {
        "id": "3cba783275f616cb",
        "type": "change",
        "z": "3581784ff799b3aa",
        "name": "Zero Delay",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "script_delay",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 260,
        "wires": [
            [
                "87313341488d5136"
            ]
        ]
    },
    {
        "id": "f6b0e71050799ee2",
        "type": "debug",
        "z": "3581784ff799b3aa",
        "name": "Process Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 40,
        "wires": []
    },
    {
        "id": "7cc11906534b4543",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Validate",
        "func": "if(msg.payload[0]!=undefined) {\n    // set commands and send msg\n    msg.commands = msg.payload[0].commands\n    \n    const first_command = msg.commands[0]\n    \n    // The first command must be a device meta-command\n    if(first_command.indexOf(\"#dev\")!=0) {\n        node.warn(`First command must be a device command! Dropping ${msg.cmd_name}`)\n    } else {\n        let last_cmd = global.get(\"info\").cmd_name\n        if(msg.cmd_name !== last_cmd) {\n            //node.warn(\"Pushing: \"+msg.cmd_name)\n            global.get(\"info\").cmd_name=msg.cmd_name\n            // set counter\n            msg.counter = 0\n            \n            // set command sentiment\n            const cmd_parts = msg.payload[0].name.split(\" \")\n            msg.cmd_sentiment=cmd_parts[0]\n            \n            try {\n               msg.img=msg.tweet.extended_entities.media[0].media_url \n            } catch(err) {\n                //node.warn(\"No image!\")\n                msg.img=null\n            }\n            \n            if(global.get(\"settings\").require_image) {\n                if(msg.img || msg.source!=\"twitter\") {\n                    return msg;\n                }\n            } else {\n                return msg\n            }\n        } else {\n            //node.warn(\"Dropping consecutive: \"+last_cmd)\n        }\n    }\n} else {\n    node.warn(msg.query.name + \": Not Found!\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "73d9e25da19621e7",
        "type": "switch",
        "z": "a0954fe29f87ceff",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "control",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 400,
        "wires": [
            [
                "54ddcdf1a3f321fa"
            ],
            [
                "010b4454e988afe3"
            ]
        ],
        "info": "Output 1. Queue Control\nOutput 2. Init message sent at end of every script"
    },
    {
        "id": "3ef298db31890e5d",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Play All",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "trigger",
        "payloadType": "str",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "0f4b37566e66f7ea"
            ]
        ]
    },
    {
        "id": "0f4b37566e66f7ea",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "Set Play Data",
        "func": "const lipsum = global.get(\"lipsum\")\n\nmsg.twitter_search=\"Howdy\"\nglobal.get(\"twitter_scanner\").search.set(msg)\nmsg.language=\"en\"\nmsg.testing=\"font_test\"\n\nmsg.tweet = {\n   extended_entities : {\n       media : [{ media_url: \"\"}]\n   }\n}\nmsg.tweet.extended_entities.media[0].media_url=\"https://www.greenfacelabs.com/wp-content/uploads/2019/07/waveform-768x576.jpg\"\n\nmsg.sentiment = {\n    positive : [],\n    negative : []\n}\n\nfor(i=0;i<10;i++) {\n    msg.sentiment.positive[i]=`Up_${i+1}`\n    msg.sentiment.negative[i]=`Down_${i+1}`\n}\n\nfor(i=-10;i<11;i++) {\n    let sentiment = i>0 ? \"Up\":\"Down\"\n    const magnitude = Math.abs(i)\n    if(i==0) sentiment=\"Default\"\n    if(i!=0) sentiment = `${sentiment} ${magnitude}`\n    msg.payload = {name: sentiment}\n    msg.tweet.text = lipsum.get(20)+` Howdy ${sentiment}!`\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "6b769294dec11207"
            ]
        ]
    },
    {
        "id": "f4d24581fa554a37",
        "type": "mongodb in",
        "z": "11a5884a1e26f777",
        "mongodb": "54588401fea63e01",
        "name": "Get Data",
        "collection": "sentiment_4_2",
        "operation": "find",
        "x": 440,
        "y": 80,
        "wires": [
            [
                "539b1bb86df82852"
            ]
        ]
    },
    {
        "id": "06add11047b34c37",
        "type": "file in",
        "z": "11a5884a1e26f777",
        "name": "Get File Data",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "7718c4b15d40c5bf"
            ]
        ]
    },
    {
        "id": "7718c4b15d40c5bf",
        "type": "json",
        "z": "11a5884a1e26f777",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "539b1bb86df82852",
                "a94f2f4b153f3bca"
            ]
        ]
    },
    {
        "id": "b5f09f1928bf2ccc",
        "type": "switch",
        "z": "11a5884a1e26f777",
        "name": "",
        "property": "data_source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mongo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "file",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "f4d24581fa554a37"
            ],
            [
                "06add11047b34c37"
            ]
        ]
    },
    {
        "id": "539b1bb86df82852",
        "type": "function",
        "z": "11a5884a1e26f777",
        "name": "Set Scripts",
        "func": "// payload is object containing array of all scripts\nconst info = global.get(\"info\")\ninfo.scripts=msg.payload\nconst text = \"Data Source: \"+global.get(\"settings\").data_source + \" \" + info.scripts.length + \" scripts\"\nmsg.payload=({text:text});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 80,
        "wires": [
            [
                "909347dd458280d9"
            ]
        ]
    },
    {
        "id": "5dcf2412633e21e2",
        "type": "subflow:11a5884a1e26f777",
        "z": "ef4cb095a7656cc5",
        "name": "Init Scripts",
        "env": [],
        "x": 350,
        "y": 620,
        "wires": [
            [
                "5946ec28ecf168be"
            ]
        ]
    },
    {
        "id": "21345e99bad74071",
        "type": "debug",
        "z": "3581784ff799b3aa",
        "name": "Command done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 220,
        "wires": []
    },
    {
        "id": "1e5a8f6fbe35d25a",
        "type": "debug",
        "z": "90cfb10a56fd7196",
        "name": "GetScript:Validate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 180,
        "wires": []
    },
    {
        "id": "475a0b86f6c590d3",
        "type": "inject",
        "z": "a0954fe29f87ceff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "status.text",
                "v": "...",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "5a1ebb28ce1c7929"
            ]
        ]
    },
    {
        "id": "7dd170435563c70f",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "Set Queue global",
        "func": "let qlen=0\nlet arr=msg.status.text.split(\" \")\nlet status=arr[0]\nif(status!=\"open\") {\n    qlen=arr[1]\n}\n\nlet queue = global.get(\"queue\")\nqueue.status=status\nqueue.len=qlen\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "59bbae44cb4481db",
        "type": "debug",
        "z": "a0954fe29f87ceff",
        "name": "Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 180,
        "wires": []
    },
    {
        "id": "a94f2f4b153f3bca",
        "type": "debug",
        "z": "11a5884a1e26f777",
        "name": "Json data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 320,
        "wires": []
    },
    {
        "id": "909347dd458280d9",
        "type": "function",
        "z": "11a5884a1e26f777",
        "name": "Build Command Options",
        "func": "const scripts = global.get(\"info\").scripts\nmsg.options=[]\nscripts.forEach(function(currentValue, index, arr) {\n    const name = currentValue.name\n    let obj = {}\n    obj[name] = { \"name\" : \"${name}\" }\n    msg.options.push(name)\n})\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 200,
        "wires": [
            [
                "21f6e88fbb40fadc"
            ]
        ]
    },
    {
        "id": "212e0062caa9429e",
        "type": "function",
        "z": "a0954fe29f87ceff",
        "name": "DeQueue",
        "func": "let ok_to_add=false\nif(msg.cmd_name==\"Init\" || msg.cmd_name==\"Setup\") {\n    ok_to_add=true\n} else {\n    const twitter_scanner=global.get(\"twitter_scanner\")\n    const recent_tweets = twitter_scanner.recent_tweets\n    try {\n        if(msg.tweet.text>\"\") {\n            ok_to_add = recent_tweets.add_tweet(msg.tweet.text)\n        }\n    }\n    catch(err) {\n        node.warn(err)\n    }\n    \n    recent_tweets.debug()\n}\n\nif(ok_to_add) {\n    msg.sender=\"\"\n    return msg\n} else {\n    node.warn(\"Dropping duplicate: \"+msg.tweet.text)\n    let newmsg = {\n        topic: \"control\",\n        payload: \"trigger\",\n        sender: \"dequeue\"\n    }\n    node.send(newmsg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 260,
        "wires": [
            [
                "60ec921b4b8b4219"
            ]
        ]
    },
    {
        "id": "60ec921b4b8b4219",
        "type": "switch",
        "z": "a0954fe29f87ceff",
        "name": "Drop Duplicates",
        "property": "sender",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "dequeue",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "dequeue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 260,
        "wires": [
            [
                "54ddcdf1a3f321fa"
            ],
            [
                "010b4454e988afe3"
            ]
        ]
    },
    {
        "id": "127a54f3ac87b25f",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Read Scripts",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 190,
        "y": 700,
        "wires": [
            [
                "ccd7c905b12a3a3e"
            ]
        ]
    },
    {
        "id": "ccd7c905b12a3a3e",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "func": "global.get(\"read_scripts\")(node)\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "5dcf2412633e21e2"
            ]
        ]
    },
    {
        "id": "8f0eb1af610523e6",
        "type": "function",
        "z": "b77158335238532e",
        "name": "Debug Filter",
        "func": "if(msg.topic!=\"control\") {\n    msg.dev0={}\n    msg.dev1={}\n    \n    msg.debug_style=global.get(\"settings\").debug ? \"\" : \"display:none\"\n    msg.cmd_name = `Script name: <span>${msg.cmd_name}</span>`\n    if(msg.sentiment) msg.sentiment_score = `Sentiment: <span>${msg.sentiment.score}</span>`\n    \n    flow.set(msg.device+\"_endpoint\",`URI: <span>${msg.endpoint}</span>`)\n    msg.dev0.endpoint=flow.get(\"dev0_endpoint\")\n    msg.dev1.endpoint=flow.get(\"dev1_endpoint\")\n\n    flow.set(msg.device+\"_device_name\",`${msg.payload.device_name}`)\n    msg.dev0.device_name=flow.get(\"dev0_device_name\")\n    msg.dev1.device_name=flow.get(\"dev1_device_name\")\n\n    flow.set(msg.device+\"_fxn\",`Fxn: <span>${msg.payload.fxn}</span>`)\n    msg.dev0.fxn=flow.get(\"dev0_fxn\")\n    msg.dev1.fxn=flow.get(\"dev1_fxn\")\n    \n    flow.set(msg.device+\"_query\",`CMD: <span>${msg.query}</span>`)\n    msg.dev0.query = flow.get(\"dev0_query\")\n    msg.dev1.query = flow.get(\"dev1_query\")\n    \n    // msg.send_status=`Status: <span>Sending</span>`\n    return msg;\n} else {\n    // msg.send_status=`Status: <span>Idle</span>`\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "279a1e093d21849e",
        "type": "ui_template",
        "z": "ef4cb095a7656cc5",
        "group": "ebd8e8684f7f7eda",
        "name": "Debug",
        "order": 1,
        "width": 6,
        "height": "5",
        "format": "<style>\n    .nr-dashboard-theme {\n        font-family: arial !important;\n    }\n    .nr-dashboard-button .md-button {\n        width: 100px;\n        margin: 0 auto;\n    }\n    md-select-value {\n        color: red !important;\n        border-color: initial !important;\n    }\n    .debug_class, .nr-dashboard-theme .nr-dashboard-dropdown .md-select-icon {\n        color: red;\n    }\n    .warn_class {\n        color: orange;\n    }\n    #Greenface_Labs_Debug {\n        {{msg.debug_style}};\n    }\n    #Greenface_Labs_Debug .nr-dashboard-cardtitle {\n        margin-bottom: 50px;\n    }\n    #Greenface_Labs_Debug md-card {\n        background-color: #ccc8c8 !important;\n        border-radius: 15px;\n        padding: 25px;\n    }\n    #Greenface_Labs_Debug md-card > div {\n        margin-bottom: 15px;\n    }\n    .hide {\n        display: none;\n    }\n    .debug_class span {\n        color: black;\n    }\n    #device_div span {\n        float: right;\n    }\n    #device_div, #sentiment_div {\n        display: grid;\n        grid-template-columns: auto auto;\n        grid-gap: 20px;\n        text-align: left;\n        border: 1px dotted;\n        padding: 5px;\n    }\n    #sentiment_div>div {\n        /*width: 100%;*/\n    }\n    #sentiment_div li {\n        /*color: black;*/\n    }\n    #sentiment_div ul {\n        list-style-type: none;\n        list-style-position: outside;\n        /*text-align: center;*/\n        padding:0;\n    }\n    .device_name  {\n        font-weight: bold;\n    }\n</style>\n\n<div id=\"debug_cmd_name\" class=\"debug_class\" ng-bind-html=\"msg.cmd_name\"></div>\n<div class=\"debug_class\" ng-bind-html=\"msg.sentiment_score\"></div>\n<!--<div class=\"debug_class\" ng-bind-html=\"msg.send_status\"></div>-->\n\n<div id=\"device_div\" class=\"debug_class\">\n    <div id=\"device_0\">\n        <strong>Device 0</strong><span class=\"device_name\" ng-bind-html=\"msg.dev0.device_name\"></span>\n        <div class=\"debug_class\" ng-bind-html=\"msg.dev0.endpoint\"></div>\n        <div class=\"debug_class\" ng-bind-html=\"msg.dev0.fxn\"></div>\n        <div class=\"debug_class\" ng-bind-html=\"msg.dev0.query\"></div>\n    </div>\n    <div id=\"device_1\">\n        <strong>Device 1</strong><span class=\"device_name\" ng-bind-html=\"msg.dev1.device_name\"></span>\n        <div class=\"debug_class\" ng-bind-html=\"msg.dev1.endpoint\"></div>\n        <div class=\"debug_class\" ng-bind-html=\"msg.dev1.fxn\"></div>\n        <div class=\"debug_class\" ng-bind-html=\"msg.dev1.query\"></div>\n    </div>\n</div>\n\n<div id=\"sentiment_div\" class=\"debug_class {{msg.testing}}\">\n    <div id=\"good_words\">\n        <strong>Positive Words</strong>\n        <ul>\n            <li class=\"{{msg.testing ? 'Up' : ''}} {{x}}\" ng-repeat=\"x in msg.sentiment.positive\">{{x}}</li>\n        </ul>\n    </div>\n    <div id=\"bad_words\">\n        <strong>Negative Words</strong>\n        <ul>\n            <li class=\"{{msg.testing ? 'Down' : ''}} {{x}}\" ng-repeat=\"x in msg.sentiment.negative\">{{x}}</li>\n        </ul>\n    </div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1250,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ab3d064cfcdb6315",
        "type": "subflow:b77158335238532e",
        "z": "ef4cb095a7656cc5",
        "name": "Process UI",
        "env": [],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "fc0850422bf0b673",
                "5e9e5405b8b86233"
            ],
            [
                "071bbc2a667242ad"
            ],
            [
                "4e2ecbedc33dc710"
            ],
            [
                "d362eae7e95a0781"
            ],
            [
                "279a1e093d21849e"
            ]
        ]
    },
    {
        "id": "fc0850422bf0b673",
        "type": "ui_template",
        "z": "ef4cb095a7656cc5",
        "group": "c79e57f6fc5202d5",
        "name": "UI Display",
        "order": 1,
        "width": "14",
        "height": 9,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Eater&family=Frijole&family=Rubik+Beastly&family=Sigmar+One&family=Amita:wght@700&family=Black+Ops+One&family=Bungee+Inline&family=Chewy&family=Courier+Prime:wght@700&family=Creepster&family=Emilys+Candy&family=Freckle+Face&family=Lakki+Reddy&family=Metal+Mania&family=Mystery+Quest&family=New+Rocker&family=Oleo+Script&family=Rock+Salt&family=Rye&family=Shrikhand&family=UnifrakturCook:wght@700&display=swap');\n    /*.nr-dashboard-theme {*/\n    /*    font-family: copperplate !important;*/\n    /*}*/\n    /*.nr-dashboard-cardcontainer {*/\n    /*    height: 500px !important;*/\n    /*}*/\n    \n    :root {\n      --up_top_color: pink;\n      --up_bottom_color: blue;\n      --down_top_color: blue;\n      --down_bottom_color: #d41;\n    }\n    \n    #Greenface_Labs_Oumuamua, #Greenface_Labs_Oumuamua_cards {\n        /*width: 100%;*/\n        /*left: 0 !important;*/\n    }\n    \n    #Greenface_Labs_Oumuamua .nr-dashboard-cardtitle {\n        /*width: inherit !important;*/\n    }\n        \n    md-content>section {\n        background-image: url('https://www.greenlightdevelopment.com/wp-content/plugins/gld_demos/alien_landers/images/spacegame/stars.gif');\n    }\n     ui-card-panel, #Greenface_Labs_Oumuamua md-card {\n        background-color: transparent !important;\n        border: none !important;\n    }\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n        color: #567;\n        font-family: 'Sigmar One', cursive;\n        font-size: 3em;\n    }\n    #toolbar {\n        display: none;\n    }\n    ui-card-panel {\n        margin-top: 35px;\n    }\n    #img_div {\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\twidth: 100%;\n\t\topacity: .3;\n    }\n    #img_div img {\n\t\twidth: 100%;\n    }\n    #tweet {\n\t\tposition: relative;\n        overflow: hidden;\n        border-radius: 45px;\n        margin: 36px;\n        min-height: 585px;\n        font-size: 3em;\n        /* padding: 25px; */\n        transition-duration: 4s;\n        opacity: 1;\n    }\n\t#tweet_text {\n\t\tmargin: 25px;\n\t\tposition: relative;\n\t\tz-index: 999;\n\t}\n    #tweet span {\n        text-shadow: 2px 2px #000;\n    }\n    #tweet.Down span {\n        color: #f90d0d;\n        text-shadow: 2px 2px #d8e84c;\n        /*color: #417940 !important;*/\n    }\n    #tweet.Up span {\n        color: #2a20f7;\n        text-shadow: 2px 2px #d41e50;\n        /*color: #bb422f !important;*/\n    }\n    #tweet.Default span {\n        color: blue !important;\n        text-shadow: orange !important;\n    }\n    #user {\n        padding-bottom: 1em;\n        position: absolute;\n        bottom: 25px;\n        width: 96%;\n    }\n    #user * {\n        float: right;\n    }\n    #user div {\n        margin-right: 1em;\n    }\n    #user_location {\n        color: #dda;\n    }\n    .Init {\n        opacity: 0 !important;\n    }\n    \n    .Test, .Default {\n        /*font-family: Sigmar One;*/\n        font-family: Bungee Inline;\n        \n        font-size: 2.2em !important;\n        color: #000;\n        background-color: #ddd;\n        background-image: linear-gradient(#ee0, #aaf);\n    }\n    .Up_1 {\n        background-image: linear-gradient(var(--up_top_color) 50%, var(--up_bottom_color) 90%);\n        font-family: 'Oleo Script', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_2 {\n        background-image: linear-gradient(var(--up_top_color) 40%, var(--up_bottom_color) 90%);\n        font-family: Sigmar One;\n        font-size: 3em !important;\n    }\n    .Up_3 {\n        background-image: linear-gradient(var(--up_top_color) 30%, var(--up_bottom_color) 90%);\n        font-family: 'Shrikhand', cursive !important;\n        /*font-family: 'Rock Salt', cursive !important;*/\n        font-size: 3em !important;\n    }\n    .Up_4 {\n        background-image: linear-gradient(var(--up_top_color) 20%, var(--up_bottom_color) 90%);\n        font-family: 'Chewy', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_5 {\n        background-image: linear-gradient(var(--up_top_color) 10%, var(--up_bottom_color) 90%);\n        font-family: 'Amita', cursive !important;\n        font-size: 2.7em !important;\n    }\n    .Up_6 {\n        background-image: linear-gradient(var(--up_top_color) 0%, var(--up_bottom_color) 90%);\n        font-family: 'Lakki Reddy', cursive !important;\n        font-size: 3em !important;\n        line-height: 1.4em !important;\n    }\n    .Up_7 {\n        background-image: linear-gradient(var(--up_top_color) -10%, var(--up_bottom_color) 90%);\n        font-family: 'Freckle Face', cursive !important;\n        font-size: 3em !important;\n        line-height: 1.5em !important;\n    }\n    .Up_8 {\n        background-image: linear-gradient(var(--up_top_color) -20%, var(--up_bottom_color) 90%);\n        font-family: 'Oleo Script', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_9 {\n        background-image: linear-gradient(var(--up_top_color) -30%, var(--up_bottom_color) 90%);\n        font-family: 'Mystery Quest', cursive !important;\n        font-size: 3em !important;\n    }\n    .Up_10 {\n        background-image: linear-gradient(var(--up_top_color) -40%, var(--up_bottom_color) 90%);\n        font-family: 'Emilys Candy', cursive !important;\n        font-size: 3.3em !important;\n    }\n    .Up {\n        color: #d41e50;\n        text-shadow: 2px 2px #2a20f7;\n        background-color: #5a5;\n        /*background-image: linear-gradient(green, yellow);*/\n        /*font-family: 'Alfa Slab One', cursive !important;*/\n    }\n    .Down_1 {\n        background-image: linear-gradient(var(--down_top_color) 50%, var(--down_bottom_color) 90%);\n        font-family: 'Courier Prime', cursive !important;\n        font-size: 3em !important;\n    }\n    .Down_2 {\n        background-image: linear-gradient(var(--down_top_color) 40%, var(--down_bottom_color) 90%);\n        font-family: 'Metal Mania', cursive !important;\n        font-size: 3em !important;\n    }\n    .Down_3 {\n        background-image: linear-gradient(var(--down_top_color) 30%, var(--down_bottom_color) 90%);\n        font-family: 'Alfa Slab One', cursive !important;\n        font-size: 3em !important;\n    }\n    .Down_4 {\n        background-image: linear-gradient(var(--down_top_color) 20%, var(--down_bottom_color) 90%);\n        font-family: 'New Rocker', cursive !important;\n        font-size: 3em !important;\n    }\n    .Down_5 {\n        background-image: linear-gradient(var(--down_top_color) 10%, var(--down_bottom_color) 90%);\n        font-family: 'UnifrakturCook', cursive !important;\n        font-size: 3.5em !important;\n        letter-spacing: 2px;\n    }\n    .Down_6 {\n        background-image: linear-gradient(var(--down_top_color) 0%, var(--down_bottom_color) 90%);\n        font-family: 'Rye', cursive !important;\n        font-size: 3em !important;\n        line-height: 1.3em;\n    }\n    .Down_7 {\n        background-image: linear-gradient(var(--down_top_color) -10%, var(--down_bottom_color) 90%);\n        font-family: 'Frijole', cursive !important;\n        font-size: 3em !important;\n    }\n    .Down_8 {\n        background-image: linear-gradient(var(--down_top_color) -20%, var(--down_bottom_color) 90%);\n        font-family: 'Black Ops One', cursive !important;\n        font-size: 3em !important;\n    }\n    .Down_9 {\n        background-image: linear-gradient(var(--down_top_color) -30%, var(--down_bottom_color) 90%);\n        font-family: 'Creepster', cursive !important;\n        font-size: 3.5em !important;\n        letter-spacing: 4px;\n    }\n    .Down_10 {\n        background-image: linear-gradient(var(--down_top_color) -40%, var(--down_bottom_color) 90%);\n        font-family: 'Eater', cursive !important;\n        font-size: 2.5em !important;\n        /*color: #30303a !important;*/\n    }\n    .Down {\n        background-color: #f77;\n        color: #d8e84c;\n        text-shadow: 2px 2px #f90d0d;\n        /*background-image: linear-gradient(yellow 50%, red 90%);*/\n        /*font-family: 'Rock Salt', cursive;\n        font-family: 'Freckle Face', cursive;*/\n    }\n    \n</style>\n<div id=\"tweet\" class=\"{{msg.cmd_sentiment}} {{msg.tweet_class}}\">\n    <div id=\"tweet_text\" ng-bind-html=\"msg.tweet.text\" ></div>\n    <div id=\"img_div\"><img id=\"the_image\" ng-show=\"msg.img\" ng-src=\"{{msg.img}}\" /></div>\n</div>\n\n<div id=\"user\">\n    <img src=\"{{msg.tweet.user.profile_image_url}}\" ng-hide=\"{{msg.cmd_name==='Init'}}\" />\n    <div id=\"user_location\" ng-bind-html=\"msg.location.place\"></div>\n    <div ng-bind-html=\"msg.tweet.user.screen_name\"></div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1270,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "071bbc2a667242ad",
        "type": "ui_audio",
        "z": "ef4cb095a7656cc5",
        "name": "Default talker",
        "group": "c79e57f6fc5202d5",
        "voice": "Microsoft Mark - English (United States)",
        "always": true,
        "x": 1270,
        "y": 180,
        "wires": []
    },
    {
        "id": "4e2ecbedc33dc710",
        "type": "ui_audio",
        "z": "ef4cb095a7656cc5",
        "name": "Up Talker",
        "group": "c79e57f6fc5202d5",
        "voice": "Microsoft Zira - English (United States)",
        "always": "",
        "x": 1260,
        "y": 240,
        "wires": []
    },
    {
        "id": "d362eae7e95a0781",
        "type": "ui_audio",
        "z": "ef4cb095a7656cc5",
        "name": "Down talker",
        "group": "c79e57f6fc5202d5",
        "voice": "Microsoft Mark - English (United States)",
        "always": "",
        "x": 1270,
        "y": 300,
        "wires": []
    },
    {
        "id": "418a7db7e361ee58",
        "type": "debug",
        "z": "ef4cb095a7656cc5",
        "name": "UI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 100,
        "wires": []
    },
    {
        "id": "a6743a6db37c3279",
        "type": "status",
        "z": "ef4cb095a7656cc5",
        "name": "Talker status",
        "scope": [
            "071bbc2a667242ad",
            "4e2ecbedc33dc710",
            "d362eae7e95a0781"
        ],
        "x": 1010,
        "y": 400,
        "wires": [
            [
                "34db4e46bb08a130"
            ]
        ]
    },
    {
        "id": "34db4e46bb08a130",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "Set Talker Status",
        "func": "global.get(\"talker\").status=msg.status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5946ec28ecf168be",
        "type": "ui_dropdown",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "ebd8e8684f7f7eda",
        "order": 1,
        "width": "6",
        "height": "2",
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "x": 180,
        "y": 460,
        "wires": [
            [
                "97658eafb9548970"
            ]
        ]
    },
    {
        "id": "97658eafb9548970",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "func": "msg.tweet={ text: \"\", user: {} }\nmsg.payload = { \"name\" : msg.payload }\n// flow.set(\"latest_select\",msg.payload)\nnode.warn(flow.get(\"latest_select\"))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "db38738f211fe984"
            ]
        ]
    },
    {
        "id": "ac5d82c807760246",
        "type": "function",
        "z": "b77158335238532e",
        "name": "",
        "func": "const is_idle = msg.topic===\"control\" && msg.payload===\"trigger\" && msg.cmd_name===\"Init\"\nconst color = is_idle ? \"green\" : \"red\"\nconst stat = is_idle ? \"Idle\" : \"Busy\"\nmsg.payload=({fill:color,shape:\"dot\",text:\"Status: \"+stat});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "dfde5a6167a38ec6",
        "type": "ui_button",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "group": "ebd8e8684f7f7eda",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "AGAIN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "latest_select",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "419727bd6b7eae5c"
            ]
        ]
    },
    {
        "id": "4a431652fb63bd1b",
        "type": "delay",
        "z": "a0954fe29f87ceff",
        "name": "View/Silent Time",
        "pauseType": "delayv",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 400,
        "y": 400,
        "wires": [
            [
                "c543ab0b894d0bda"
            ]
        ]
    },
    {
        "id": "9770c43057dc96cb",
        "type": "delay",
        "z": "a0954fe29f87ceff",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 600,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "21f6e88fbb40fadc",
        "type": "debug",
        "z": "11a5884a1e26f777",
        "name": "Command Options",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 140,
        "wires": []
    },
    {
        "id": "419727bd6b7eae5c",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "func": "msg.payload = msg.payload.name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 400,
        "wires": [
            [
                "5946ec28ecf168be"
            ]
        ]
    },
    {
        "id": "424e5b22a30e1904",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "func": "msg.payload=global.get(\"lipsum\").get_chars(Math.floor(Math.random() * 40)+240,\"text\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 320,
        "wires": [
            [
                "4e2ecbedc33dc710"
            ]
        ]
    },
    {
        "id": "1680e497d6538154",
        "type": "inject",
        "z": "ef4cb095a7656cc5",
        "name": "Speak",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 850,
        "y": 320,
        "wires": [
            [
                "424e5b22a30e1904"
            ]
        ]
    },
    {
        "id": "3efaa39dc6bc9672",
        "type": "http in",
        "z": "7de09d5372187b67",
        "name": "",
        "url": "/cube",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "3c54ed58e107c78b"
            ]
        ]
    },
    {
        "id": "3457eaf67a8873ba",
        "type": "http response",
        "z": "7de09d5372187b67",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 745,
        "y": 80,
        "wires": []
    },
    {
        "id": "3c54ed58e107c78b",
        "type": "template",
        "z": "7de09d5372187b67",
        "name": "three.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n<head>\n\n\t<title>Omuamua</title>\n\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\t<style>\n\t\t@import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Eater&family=Frijole&family=Rubik+Beastly&family=Sigmar+One&family=Amita:wght@700&family=Black+Ops+One&family=Bungee+Inline&family=Chewy&family=Courier+Prime:wght@700&family=Creepster&family=Emilys+Candy&family=Freckle+Face&family=Lakki+Reddy&family=Metal+Mania&family=Mystery+Quest&family=New+Rocker&family=Oleo+Script&family=Rock+Salt&family=Rye&family=Shrikhand&family=UnifrakturCook:wght@700&display=swap');\n        @import url('https://greenfacelabs.com/three/css/omuamua.css');\n        /*@import url('https://greenfacelabs.com/three/css/demo.css');*/\n\t</style>\n\n    <script src=\"https://greenfacelabs.com/three/js/three.js\"></script>\n    <script src=\"https://greenfacelabs.com/three/js/starfield.js\"></script>\n</head>\n<body>\n<canvas id=\"the_canvas\"></canvas>\n<div id=\"flat_div\">\n\t<div id=\"tweet\" class=\"Init\">\n\t\t<div id=\"tweet_text\" ng-bind-html=\"msg.tweet.text\" >Howdy!</div>\n\t</div>\n\n\t<div id=\"user\">\n\t\t<img id=\"user_img\" />\n\t\t<div id=\"user_location\"></div>\n\t\t<div id=\"user_name\"></div>\n\t</div>\n</div>\n{{!--<div id=\"audio\">--}}\n{{!--    <button id=\"go_button\">GO</button>--}}\n{{!--    <audio id=\"audio_controls\" controls>--}}\n{{!--        <source src=\"audio/all21.mp3\" type=\"audio/mpeg\">--}}\n{{!--        Your browser does not support the audio element.--}}\n{{!--    </audio>--}}\n{{!--</div>--}}\n\n</body>\n{{!--<script src=\"https://greenfacelabs.com/three/js/demo.js\"></script>--}}\n<script src=\"https://greenfacelabs.com/three/js/omuamua.js\"></script>\n</html>\n\n",
        "output": "str",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "81724fc4bcae0282"
            ]
        ]
    },
    {
        "id": "8cdc268559c567bd",
        "type": "websocket out",
        "z": "7de09d5372187b67",
        "name": "",
        "server": "c6bb1eb5.edd3d",
        "client": "",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "81724fc4bcae0282",
        "type": "change",
        "z": "7de09d5372187b67",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/html",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Access-Control-Allow-Origin",
                "pt": "msg",
                "to": "*",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 80,
        "wires": [
            [
                "3457eaf67a8873ba"
            ]
        ]
    },
    {
        "id": "815162d38732c460",
        "type": "change",
        "z": "7de09d5372187b67",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 735,
        "y": 140,
        "wires": [
            [
                "8cdc268559c567bd"
            ]
        ]
    },
    {
        "id": "2b5a6c86de235af1",
        "type": "websocket in",
        "z": "7de09d5372187b67",
        "name": "",
        "server": "a5db9e65.7dd36",
        "client": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "1c3e15d042436a39"
            ]
        ]
    },
    {
        "id": "1c3e15d042436a39",
        "type": "switch",
        "z": "7de09d5372187b67",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 385,
        "y": 140,
        "wires": [
            [
                "db925c33d75933cb"
            ]
        ]
    },
    {
        "id": "db925c33d75933cb",
        "type": "function",
        "z": "7de09d5372187b67",
        "name": "change color",
        "func": "let colors = [\"white\",\"red\",0x00ff00,0x0000ff] //both hex or string are fine\nmsg.payload =  {\"cubeColor\": colors[Math.floor(Math.random()*colors.length)]}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 140,
        "wires": [
            [
                "815162d38732c460"
            ]
        ]
    },
    {
        "id": "5e9e5405b8b86233",
        "type": "subflow:7de09d5372187b67",
        "z": "ef4cb095a7656cc5",
        "name": "3D Scene",
        "env": [],
        "x": 1260,
        "y": 80,
        "wires": []
    },
    {
        "id": "e6362dd99525539c",
        "type": "function",
        "z": "90cfb10a56fd7196",
        "name": "Filter Bad Words",
        "func": "if ( \n        msg.tweet.text.indexOf(\"cock\")===-1 &&\n        msg.tweet.text.indexOf(\"pee\")===-1 &&\n        msg.tweet.text.indexOf(\"#shit\")===-1 &&\n        msg.tweet.text.indexOf(\"#poo\")===-1 &&\n        msg.tweet.text.indexOf(\"#scat\")===-1 &&\n        msg.tweet.text.indexOf(\"peen\")===-1 &&\n        msg.tweet.text.indexOf(\"slut\")===-1 \n    ) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "7cc11906534b4543"
            ]
        ]
    },
    {
        "id": "d63b0a5be79f97c8",
        "type": "mongodb out",
        "z": "ef4cb095a7656cc5",
        "mongodb": "54588401fea63e01",
        "name": "Save MSG",
        "collection": "messages",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 1090,
        "y": 40,
        "wires": []
    },
    {
        "id": "7c418a96356519c4",
        "type": "function",
        "z": "ef4cb095a7656cc5",
        "name": "",
        "func": "if(msg.topic===\"control\" && msg.cmd_name!==\"Init\") {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 120,
        "wires": [
            [
                "418a7db7e361ee58",
                "d63b0a5be79f97c8"
            ]
        ]
    },
    {
        "id": "01da580daf1890a1",
        "type": "mongodb in",
        "z": "08d39d48f2233c7a",
        "mongodb": "54588401fea63e01",
        "name": "Get Mongo Messages",
        "collection": "messages",
        "operation": "find",
        "x": 380,
        "y": 100,
        "wires": [
            [
                "1230d7907bbef0a2"
            ]
        ]
    },
    {
        "id": "0994add790edb8b1",
        "type": "debug",
        "z": "08d39d48f2233c7a",
        "name": "DB Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "b24e6422a26c96ce",
        "type": "inject",
        "z": "08d39d48f2233c7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "01da580daf1890a1"
            ]
        ]
    },
    {
        "id": "1230d7907bbef0a2",
        "type": "function",
        "z": "08d39d48f2233c7a",
        "name": "",
        "func": "let spectrum=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nconst spectrum_len=spectrum.length\nlet analysis = []\n// spectrum.length=spectrum_len\n//node.warn(\"Howdy: \"+spectrum_len)\n\nspectrum.forEach(function(value, index, array) {\n    const val=index-10\n    const sentiment=val<0 ? \"Down\" : \"Up\"\n    const cmd_name = val==0 ? \"Default\" : `${sentiment} ${Math.abs(val)}`\n    //node.warn(cmd_name)\n    const check_cmd_name = function (item) {\n      return item.cmd_name === cmd_name;\n    }\n    \n    array[index] = msg.payload.filter(check_cmd_name)\n  //analysis.push({ cmd_name: cmd_name, length: array[index].length })\n  analysis.push(array[index].length)\n})\n\nmsg.analysis=analysis\nmsg.payload = spectrum\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 100,
        "wires": [
            [
                "1fe65c9faa30403f"
            ]
        ]
    },
    {
        "id": "74b8216ef66e8fa3",
        "type": "template",
        "z": "08d39d48f2233c7a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n<head>\n\n\t<title>Omuamua Data</title>\n\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\t<style>\n\t\t/*@import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Eater&family=Frijole&family=Rubik+Beastly&family=Sigmar+One&family=Amita:wght@700&family=Black+Ops+One&family=Bungee+Inline&family=Chewy&family=Courier+Prime:wght@700&family=Creepster&family=Emilys+Candy&family=Freckle+Face&family=Lakki+Reddy&family=Metal+Mania&family=Mystery+Quest&family=New+Rocker&family=Oleo+Script&family=Rock+Salt&family=Rye&family=Shrikhand&family=UnifrakturCook:wght@700&display=swap');*/\n        /*@import url('https://greenfacelabs.com/three/css/omuamua.css');*/\n        /*@import url('https://greenfacelabs.com/three/css/demo.css');*/\n\n            h2 {\n                text-align: left;\n                padding-right: 40px;\n                font-size: 1.3em;\n                padding-left: 5px;                \n            }\n\n            .clear {\n                clear: both;\n                height: 0px;\n                padding: 0 !important;\n                margin-bottom: 1em !important;\n            }\n\n            .chart div {\n                font: 10px sans-serif;\n                background-color: steelblue;\n                text-align: right;\n                padding: 3px;\n                margin: 1px;\n                color: white;\n            }\n\n            .chart rect {\n                stroke: white;\n                fill: url(#grad1); /* fill: steelblue; */\n            }\n\n            .bar_data {\n                font-size: .75em;\n            }\n\n            .slice path {\n                stroke: #68a;\n            }\n\n            .bar {\n                font-size: 12px;\n                stroke-width: .3;\n            }\n\n            .arc text {\n                font: 10px sans-serif;\n                text-anchor: middle;\n            }\n\n            .arc path {\n                stroke: #fff;\n            }\n            \n            body, #main {\n                background-color: #aaa;\n                font-family: arial;\n            }\n\n            #chart_controls {\n                display: none;\n            }\n            \n            #chart_controls, #data_controls {\n                float: left;\n                margin-left: 5px;\n                margin-right: 1em;\n            }\n\n            svg.chart {\n                transition-property: opacity;\n                transition-duration: 1s;\n                opacity: 0;\n            }\n\n\t</style>\n\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.js\"></script>\n    <script src=\"https://greenfacelabs.com/three/js/d3_chart.js\"></script>\n</head>\n<body>\n<div id=\"main\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"1\">\n        <defs>\n            <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" style=\"stop-color:lightblue;stop-opacity:1\"/>\n                <stop offset=\"100%\" style=\"stop-color:steelblue;stop-opacity:1\"/>\n            </linearGradient>\n            <radialGradient id=\"rgrad0\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\n                <stop offset=\"0%\" style=\"stop-color:lightblue; stop-opacity:0\"/>\n                <stop offset=\"100%\" style=\"stop-color:steelblue;stop-opacity:1\"/>\n            </radialGradient>\n            <radialGradient id=\"rgrad1\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\n                <stop offset=\"0%\" style=\"stop-color:lightgreen;stop-opacity:0\"/>\n                <stop offset=\"100%\" style=\"stop-color:darkgreen;stop-opacity:1\"/>\n            </radialGradient>\n        </defs>\n    </svg>\n    <div id=\"chart\" class=\"chart\"><h2 id=\"sub_title\">Sentiment</h2>\n        <div id=\"data_controls\">\n            <label for=\"select_search_terms\">Select Search Terms:</label>\n            <select id=\"select_search_terms\" onchange=\"select_search_terms(this.value)\"><option>Please Select</option><option>all</option></select>\n        </div>\n        <div id=\"chart_controls\">\n            <label for=\"select_chart_type\">Select Chart Type:</label>\n            <select id=\"select_chart_type\" onchange=\"select_chart_type(this.value)\"><option>bar</option><option>pie</option></select>\n        </div>\n        <div class=\"clear\">&nbsp;</div>\n    </div>\n    {{!-- <button onclick=\"howdy()\">Howdy!</button> --}}\n</div>\n</body>\n<script>\n        const dbugger = {\n            debug_on : true,\n            \"print\" : function(s,force) {\n                if(this.debug_on || force) {\n                    console.log(s);\n                }\n            }\n        };\n\n    const server = window.location.href.split(\"http://\")[1].split(\"/\")[0]\n    console.log(\"Page location is \" + server)\n\n    var recv_socket = new  WebSocket(\"ws://\" + server + \"/ws/receive_chart\");\n    var send_socket = new  WebSocket(\"ws://\" + server + \"/ws/publish_chart\");\n\n    let recv_socketOpened = false\n    let send_socketOpened = false\n\n    function howdy() {\n        dbugger.print(\"Hello?\",true)\n        var message = {\n            'payload': 'Hello World!'\n        };\n        recv_socket.send(JSON.stringify(message));\n    }\n\n    recv_socket.onopen = function() {\n        recv_socketOpened = true\n        var message = {\n            'topic': 'Receive Client connected'\n        };\n        recv_socket.send(JSON.stringify(message));\n        // recv_socket.send('Receive Client connected');\n    };\n\n    send_socket.onopen = function() {\n        send_socketOpened = true\n        var message = {\n            'topic': 'Send Client connected'\n        };\n        recv_socket.send(JSON.stringify(message));\n    };\n\n    send_socket.onclose = function(){\n        console.log('Connection closed');\n    };\n\n    send_socket.onerror = function(error) {\n        console.log('Error detected: ' + JSON.stringify(error));\n    };\n\n    let the_data\n\n    send_socket.onmessage = function(e) {\n        let server_message = e.data;\n        let responseObject = JSON.parse(server_message);\n        //msg_handler(responseObject)\n        console.log(responseObject)\n        switch(responseObject.topic) {\n            case \"chart_data\":\n                the_data = d3_chart.the_data = responseObject.chart_data\n                reCreateChart()\n                document.getElementById(\"chart_controls\").style.display=\"block\"\n                // setTimeout(function() {\n                //     fade_chart(1)\n                // },1000)\n                break;\n            case \"search_terms\":\n                const select = document.getElementById(\"select_search_terms\")\n                let options = select.innerHTML\n                responseObject.search_terms.forEach(function(value,index,arr) {\n                    console.log(`Value: ${value}`)\n                    options += `<option>${value}</option>`\n                })\n                select.innerHTML=options\n                break;\n            default:\n                console.log(\"Unknown Topic: \"+responseObject.topic)\n        }\n    }\n\n    let d3_chart = new D3_chart();\n    // d3_chart.wid = $(\"body\").width() - 20;\n    d3_chart.wid = document.body.clientWidth - 20;\n    d3_chart.left_col_width = 200;\n\n    let report_type = 'bar'\n\n    d3_chart.w = d3_chart.wid;\n\n    function createChart() {\n        switch (report_type) {\n            case 'bar':\n                d3_chart.createBarChart();\n                break;\n            case 'pie':\n                d3_chart.createPieChart();\n                //$(\"svg g.arc\").tooltip();\n                break;\n            default:\n                alert(\"No report specified!\");\n        }\n    }\n\n    function reCreateChart() {\n        d3.select(\"#chart svg\").remove();\n        //d3_chart.the_data = the_data\n        createChart();\n        setTimeout(function() {\n            fade_chart(1)\n        },1000)\n    }\n\n    function select_chart_type(val) {\n        console.log(val)\n        report_type=val\n        reCreateChart()        \n    }\n\n    function fade_chart(val) {\n        const chart_svg = document.querySelector(\"svg.chart\")\n        if(chart_svg) chart_svg.style.opacity=val\n    }\n\n    function select_search_terms(val) {\n        const select = document.getElementById(\"select_search_terms\")\n        if(select.firstElementChild.innerHTML==='Please Select') select.firstElementChild.remove()\n        if(recv_socketOpened) {\n            var message = {\n                'topic': 'search_terms_selected',\n                'value': val\n            };\n            recv_socket.send(JSON.stringify(message));\n            fade_chart(0)\n        } else {\n            console.error(\"No Receive Socket!\")\n        }\n    }\n\n    //createChart()\n\n</script>\n</html>\n\n",
        "output": "str",
        "x": 300,
        "y": 520,
        "wires": [
            [
                "0869e2fddd3a7c98"
            ]
        ]
    },
    {
        "id": "de36e8abe39cfdd2",
        "type": "http in",
        "z": "08d39d48f2233c7a",
        "name": "",
        "url": "/chart",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "74b8216ef66e8fa3"
            ]
        ]
    },
    {
        "id": "c5ceb09f1a3a6470",
        "type": "http response",
        "z": "08d39d48f2233c7a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 520,
        "wires": []
    },
    {
        "id": "0869e2fddd3a7c98",
        "type": "change",
        "z": "08d39d48f2233c7a",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/html",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Access-Control-Allow-Origin",
                "pt": "msg",
                "to": "*",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 520,
        "wires": [
            [
                "c5ceb09f1a3a6470"
            ]
        ]
    },
    {
        "id": "580e4f9d514c7c1a",
        "type": "debug",
        "z": "08d39d48f2233c7a",
        "name": "MSG to Client",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 100,
        "wires": []
    },
    {
        "id": "1fe65c9faa30403f",
        "type": "function",
        "z": "08d39d48f2233c7a",
        "name": "Prep Chart Data",
        "func": "let chart_data = {}\nchart_data.data = msg.analysis\nchart_data.legends = []\nchart_data.titles = []\nchart_data.data.forEach(function(element,index) {\n    let this_name = index<10 ? \"Down \" : \"Up \"\n    this_name += Math.abs(index-10).toString()\n    if(index===10) this_name=\"Default\"\n    chart_data.legends[index]={name: this_name, id: \"element_\"+index}\n    chart_data.titles[index]=\"Hi there\"\n});\n// msg.payload = chart_data\nmsg.payload = {\n    chart_data: chart_data,\n    topic: \"chart_data\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 100,
        "wires": [
            [
                "4402dbc5cfe0b23e",
                "580e4f9d514c7c1a"
            ]
        ]
    },
    {
        "id": "4402dbc5cfe0b23e",
        "type": "websocket out",
        "z": "08d39d48f2233c7a",
        "name": "",
        "server": "0e93824c5fd84cfd",
        "client": "",
        "x": 1060,
        "y": 280,
        "wires": []
    },
    {
        "id": "2437dcda2af27d62",
        "type": "inject",
        "z": "08d39d48f2233c7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"$match\":{\"search_terms\":\"girl\"}},{\"$match\":{\"cmd_sentiment\":\"Up\"}},{\"$project\":{\"img\":1}},{\"$sort\":{\"cmd_name\":1}}]",
        "payloadType": "json",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "f57dacee767ef9eb"
            ]
        ]
    },
    {
        "id": "f57dacee767ef9eb",
        "type": "mongodb in",
        "z": "08d39d48f2233c7a",
        "mongodb": "54588401fea63e01",
        "name": "Aggregate",
        "collection": "messages",
        "operation": "aggregate",
        "x": 690,
        "y": 360,
        "wires": [
            [
                "1402cd1d4667a457"
            ]
        ]
    },
    {
        "id": "044ee453c280f5c0",
        "type": "inject",
        "z": "08d39d48f2233c7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"$group\":{\"_id\":null,\"uniqueValues\":{\"$addToSet\":\"$search_terms\"}}}]",
        "payloadType": "json",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "f57dacee767ef9eb",
                "14bf8087deefbab9"
            ]
        ]
    },
    {
        "id": "14bf8087deefbab9",
        "type": "debug",
        "z": "08d39d48f2233c7a",
        "name": "DB Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 440,
        "wires": []
    },
    {
        "id": "731d2e91db5f5b42",
        "type": "websocket in",
        "z": "08d39d48f2233c7a",
        "name": "",
        "server": "eca071f0d6730181",
        "client": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "d1f5e09ebae45f5e"
            ]
        ]
    },
    {
        "id": "d1f5e09ebae45f5e",
        "type": "function",
        "z": "08d39d48f2233c7a",
        "name": "",
        "func": "const message = JSON.parse(msg.payload)\n// node.warn(msg)\nmsg.topic=message.topic\nswitch (message.topic) {\n    case \"Receive Client connected\":\n        // get search_terms choices from db\n        msg.payload = [\n            {\n                \"$group\": {\n                    \"_id\": null,\n                    \"uniqueValues\": {\n                        \"$addToSet\": \"$search_terms\"\n                    }\n                }\n            }\n        ]\n        return msg;\n        break;\n    case \"Send Client connected\":\n        msg.payload = {\n            search_terms: flow.get(\"search_terms\"),\n            topic: \"search_terms\"\n        }\n        msg._session=null // flush socket\n        return msg;\n        break;\n    case \"search_terms_selected\":\n        if (message.value===\"all\") {\n            msg.payload={}\n        } else {\n            msg.payload = {\n                search_terms: message.value\n            }\n        }\n        msg.topic=\"get_data\"    // override previous setting\n        msg._session = null // flush socket\n        return msg;\n        break;\n    default:\n        msg.payload = \"Unknown request: \"+msg.payload\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "14bf8087deefbab9",
                "dac13bce055c0d56"
            ]
        ]
    },
    {
        "id": "1402cd1d4667a457",
        "type": "function",
        "z": "08d39d48f2233c7a",
        "name": "",
        "func": "flow.set(\"search_terms\", msg.payload[0].uniqueValues)\n\n// msg.payload = {\n//     search_terms: msg.payload[0].uniqueValues,\n//     topic: \"search_terms\"\n// }\n\n// msg.payload = msg.payload[0].uniqueValues\n// msg.topic=\"search_terms\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 360,
        "wires": [
            [
                "0994add790edb8b1"
            ]
        ]
    },
    {
        "id": "dac13bce055c0d56",
        "type": "switch",
        "z": "08d39d48f2233c7a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Send Client connected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Receive Client connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 280,
        "wires": [
            [
                "01da580daf1890a1"
            ],
            [
                "4402dbc5cfe0b23e",
                "580e4f9d514c7c1a"
            ],
            [
                "f57dacee767ef9eb"
            ]
        ]
    },
    {
        "id": "8ba294440f2f0c87",
        "type": "status",
        "z": "7de09d5372187b67",
        "name": "",
        "scope": [
            "8cdc268559c567bd",
            "2b5a6c86de235af1"
        ],
        "x": 120,
        "y": 220,
        "wires": [
            [
                "3c73ab739fb4802a",
                "32f239937eb3baa0"
            ]
        ]
    },
    {
        "id": "32f239937eb3baa0",
        "type": "debug",
        "z": "7de09d5372187b67",
        "name": "Scene Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 320,
        "wires": []
    },
    {
        "id": "3c73ab739fb4802a",
        "type": "function",
        "z": "7de09d5372187b67",
        "name": "",
        "func": "const status = global.get(\"status\")\nstatus[msg.status.source.type] = msg.status.text\nmsg.status.text = status.sockets_connected(node) ? \"connected\" : \"not connected\"\n//msg.status.text = msg.status.source.type + \" connected\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 220,
        "wires": [
            []
        ]
    }
]